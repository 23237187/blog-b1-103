[2014-02-13 18:39:28.429] [ERROR] console - hello world
[2014-02-13 18:39:41.726] [INFO] console - [ { title: 'Dancer.js, a high-level audio API',
    tags: [ 'web audio', 'audio data', 'webgl' ],
    category: 'audio',
    date: Mon Jul 30 2012 00:00:00 GMT+0800 (中国标准时间),
    preview: '<p>dancer.js is a high-level audio API, usable with both Mozilla&#39;s Audio Data API and Webkit&#39;s Web Audio API with flash fallback, designed to make sweet visualizations.\n<a href="http://jsantell.github.com/dancer.js">http://jsantell.github.com/dancer.js</a></p>\n<p><em>v0.2.1 (6/15/2012)</em></p>\n<p>Features</p>\n<hr>\n<ul>\n<li>Use real-time audio waveform and frequency data and map it to any arbitrary visualization</li>\n<li>Leverage beat detection into your visualizations</li>\n<li>Simple API to time callbacks and events to any section of a song</li>\n<li>Supports Web Audio (webkit), Audio Data (mozilla) and flash fallback (v9+)</li>\n<li>Extensible framework supporting plugins and custom behaviours</li>\n</ul>\n<p><a href="/mypost/dancer.js" title="Read more of Dancer.js, a high-level audio API">read more</a></p>',
    content: '<p>dancer.js is a high-level audio API, usable with both Mozilla&#39;s Audio Data API and Webkit&#39;s Web Audio API with flash fallback, designed to make sweet visualizations.</p>\n<script>\n  console.log(\'this is a script parse test\');\n</script>\n\n<p><a href="http://jsantell.github.com/dancer.js">http://jsantell.github.com/dancer.js</a></p>\n<p><em>v0.2.1 (6/15/2012)</em></p>\n<h2 id="features">Features</h2>\n<ul>\n<li>Use real-time audio waveform and frequency data and map it to any arbitrary visualization</li>\n<li>Leverage beat detection into your visualizations</li>\n<li>Simple API to time callbacks and events to any section of a song</li>\n<li>Supports Web Audio (webkit), Audio Data (mozilla) and flash fallback (v9+)</li>\n<li>Extensible framework supporting plugins and custom behaviours</li>\n</ul>\n<h2 id="dancer-instance-methods">Dancer Instance Methods</h2>\n<h3 id="controls">Controls</h3>\n<p>All controls return <code>this</code>.</p>\n<ul>\n<li><code>play()</code> plays the audio and begins the dance.</li>\n<li><code>stop()</code> stops the madness.</li>\n</ul>\n<h3 id="getters">Getters</h3>\n<ul>\n<li><code>getTime()</code> returns the current time.</li>\n<li><code>getWaveform()</code> returns the waveform data array (Float32Array(1024))</li>\n<li><code>getSpectrum()</code> returns the frequency data array (Float32Array(512)). </li>\n<li><code>getFrequency( freq [, endFreq ] )</code> returns the magnitude of a frequency or average over a range of frequencies.</li>\n<li><code>isLoaded()</code> returns a boolean value for the dancer instance&#39;s song load state.</li>\n<li><code>isPlaying()</code> returns a boolean value indicating whether the dancer instance&#39;s song is currently playing or not.</li>\n</ul>\n<h3 id="sections">Sections</h3>\n<p>All section methods return <code>this</code> (CHAIN IT UP) and callbacks executed with <code>this</code> referencing the dancer instance.</p>\n<ul>\n<li><code>after( t, callback )</code> fires callback on every frame after time <code>t</code>.</li>\n<li><code>before( t, callback )</code> fires callback on every frame before time <code>t</code>.</li>\n<li><code>between( t0, t1, callback )</code> fires callback on every frame between time <code>t0</code> and <code>t1</code>.</li>\n<li><code>onceAt( t, callback )</code> fires callback once at time <code>t</code>.</li>\n</ul>\n<h3 id="bindings">Bindings</h3>\n<p>Basic pub/sub to tie into the dancer instance. <code>update</code> and <code>loaded</code> are predefined events called within the framework that are published on every frame (update) and on audio file load (loaded). All callbacks executed with <code>this</code> referencing the dancer instance.</p>\n<ul>\n<li><code>bind( name, callback )</code> subscribes a callback of <code>name</code>. Can call this method several times to bind several callbacks of the same name.</li>\n<li><code>unbind( name )</code> unsubscribes all callbacks of <code>name</code>.</li>\n<li><code>trigger( name )</code> calls all callbacks of <code>name</code>.</li>\n</ul>\n<h3 id="beat">Beat</h3>\n<p>Beats are detected when the amplitude (normalized values between 0 and 1) of a specified frequency, or the max amplitude over a range, is greater than the minimum threshold, as well as greater than the previously registered beat&#39;s amplitude, which is decreased by the decay rate per frame.</p>\n<ul>\n<li><code>createBeat( options )</code> creates a new beat instance tied to the dancer instance, with an options object passed as an argument. Options listed below.<ul>\n<li><code>frequency</code> the frequency (element of the spectrum) to check for a spike. Can be a single frequency (number) or a range (2 element array) that uses the frequency with highest amplitude. Default: <code>[ 0, 10 ]</code></li>\n<li><code>threshold</code> the minimum amplitude of the frequency range in order for a beat to occur. Default: <code>0.3</code></li>\n<li><code>decay</code> the rate that the previously registered beat&#39;s amplitude is reduced by on every frame. Default: <code>0.02</code></li>\n<li><code>onBeat</code> the callback to be called when a beat is detected.</li>\n<li><code>offBeat</code> the callback to be called when there is no beat on the current frame.</li>\n</ul>\n</li>\n</ul>\n<h2 id="dancer-static-methods">Dancer Static Methods</h2>\n<ul>\n<li><code>addPlugin( name, fn )</code> registers a plugin of <code>name</code> with initiation function <code>fn</code> -- described in more detail below</li>\n<li><code>isSupported()</code> returns a string of <code>webaudio</code>, <code>audiodata</code> or <code>flash</code> indicating level of support. Returns an empty string if the browser doesn&#39;t support any of the methods. Can also return <code>null</code> when browser does not support typed arrays.</li>\n<li><code>canPlay( type )</code> returns either <code>true</code> or <code>false</code> indicating whether the browser supports playing back audio of type <code>type</code>, which can be a string of <code>&#39;mp3&#39;</code>, <code>&#39;ogg&#39;</code>, <code>&#39;wav&#39;</code>, or <code>&#39;aac&#39;</code>.</li>\n<li><code>setOptions( options )</code> takes a set of key-value pairs in an object for options. Options below.</li>\n</ul>\n<h3 id="dancer-options">Dancer Options</h3>\n<ul>\n<li><code>flashSWF</code> The path to soundmanager2.swf. Required for flash fallback.</li>\n<li><code>flashJS</code> The path to soundmanager2.js. Required for flash fallback.</li>\n</ul>\n<h2 id="dancer-constructor">Dancer Constructor</h2>\n<p><code>new Dancer( source, [ codecs ] )</code> returns a new <code>Dancer</code> instance -- takes a string of <code>source</code> as a path to the audio file. Optionally, you may pass in array of codec extensions of the form <code>[ &#39;mp3&#39;, &#39;ogg&#39; ]</code>, where the first supported codec is used and appended to source in the form <code>source + &#39;.&#39; + supportedCodec</code>.</p>\n<h2 id="beat-instance-methods">Beat Instance Methods</h2>\n<p>These methods can be called on a beat instance to turn on and off the registered callbacks</p>\n<ul>\n<li><code>on()</code> turns on the beat instance&#39;s callbacks and detections</li>\n<li><code>off()</code> turns off the beat instance&#39;s callbacks and detections</li>\n</ul>\n<h2 id="example">Example</h2>\n<p>For simple examples, check out the <code>examples/</code> folder -- both the FFT and waveform examples are straight forward, leveraging the corresponding plugins for visualizations.</p>\n<pre><code class="lang-javascript">  // To enable flash fallback, specify the paths for the flashSWF and flashJS\n  Dancer.setOptions({\n    flashJS  : &#39;../../lib/soundmanager2.js&#39;,\n    flashSWF : &#39;../../lib/soundmanager2.swf&#39;\n  });\n\n  var\n    dancer = new Dancer( &quot;sickjams.ogg&quot; ),\n    beat = dancer.createBeat({\n      onBeat: function ( mag ) {\n        console.log(&#39;Beat!&#39;);\n      },\n      offBeat: function ( mag ) {\n        console.log(&#39;no beat :(&#39;);\n      }\n    });\n\n  // Let&#39;s turn this beat on right away\n  beat.on();\n\n  dancer.onceAt( 10, function() {\n    // Let&#39;s set up some things once at 10 seconds\n  }).between( 10, 60, function() {\n    // After 10s, let&#39;s do something on every frame for the first minute\n  }).after( 60, function() {\n    // After 60s, let&#39;s get this real and map a frequency to an object&#39;s y position\n    // Note that the instance of dancer is bound to &quot;this&quot;\n    object.y = this.getFrequency( 400 );\n  }).onceAt( 120, function() {\n    // After 120s, we&#39;ll turn the beat off as another object&#39;s y position is still being mapped from the previous &quot;after&quot; method\n    beat.off();\n  });\n\n  dancer.play();\n</code></pre>\n<h2 id="requirements">Requirements</h2>\n<p><strong>HTML5 Playback with Web Audio or Audio Data</strong> Chrome and Firefox are both supported out of the box -- other browsers will need to leverage the flash fallback until either of these APIs are implemented.</p>\n<p><strong>To enable flash</strong> You must set Dancer&#39;s defaults for <code>flashSWF</code> with the path to the <code>soundmanager2.swf</code> and <code>flashJS</code> to the path to <code>soundmanager2.js</code>, both found in <code>lib/</code>. Flash player 9 is required, and you must provide an mp3 option. Waveform data in Flash is a 1024 Float32Array, but only the first 512 elements have values due to flash&#39;s computeSpectrum method.</p>\n<p><strong>Uint32Array and Float32Array are required</strong> Include a shim if you&#39;d like to support browsers that do not have these typed arrays.</p>\n<h2 id="dependencies">Dependencies</h2>\n<ul>\n<li><a href="https://github.com/corbanbrook/dsp.js/">dsp.js</a> - A subset of dsp.js (fft) is used for Fast Fourier Transformations ( Included in packaged Dancer )</li>\n<li><a href="http://www.featureblend.com/javascript-flash-detection-library.html">flash_detect</a> - flash detect is used for immediate flash detection ( Included in packaged Dancer )</li>\n<li><a href="https://github.com/scottschiller/SoundManager2">soundmanager2</a> - soundmanager2 is used for flash fallback ( found in <code>lib/</code>, asynchronously loaded )</li>\n</ul>\n<h2 id="extending-plugins">Extending/Plugins</h2>\n<p>You can extend the Dancer prototype by calling the static method <code>addPlugin( name, fn )</code>, which extends the Dancer prototype. A Dancer instance then can call the function provided in its context and subscribe to a preexisting event like <code>update</code>, or make your own. Look in the <code>plugins/</code> directory for examples. </p>\n<h2 id="development">Development</h2>\n<p>This project uses <a href="https://github.com/fat/smoosh">smoosh</a> to build and <a href="http://pivotal.github.com/jasmine/">jasmine</a> for testing. A CLI for testing would be awesome, but Mozilla and WebKit implementations differ greatly -- go to <code>spec/index.html</code> in Mozilla/WebKit browsers to test. All tests should pass in Chrome, Firefox, Opera and Safari, <em>although they can get weird</em>. Should consistently pass.</p>\n<h2 id="change-logs">Change Logs</h2>\n<p><strong>v0.2.1 (6/16/2012)</strong></p>\n<ul>\n<li>Added getWaveform() method and a corresponding visualization for waveforms</li>\n</ul>\n<p><strong>v0.2.0 (6/14/2012)</strong></p>\n<ul>\n<li>Added flash support with soundmanager2 -- flash_detect now included in build</li>\n<li>Added static methods <code>isSupported</code>, <code>canPlay</code> and <code>setOptions</code></li>\n<li>Added multiple audio codecs support (#7)</li>\n<li>Added a new simple FFT examples, both examples having feature detection and controls (#10)</li>\n<li>Fixed several Webkit bugs (#4, #8)</li>\n</ul>\n<p><strong>v0.1.0 (6/3/2012)</strong></p>\n<ul>\n<li>Initial Web Audio/ Audio Data release</li>\n</ul>\n',
    slug: 'dancer.js',
    url: '/mypost/dancer.js' },
  { title: 'Flotr2, a canvas graphing library',
    tags: [ 'charts', 'graph', 'canvas' ],
    category: 'canvas',
    date: Wed Jul 25 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>The Canvas graphing library. Flotr may be extended by adding new plugins and graph types.</p>\n<h2 id="api">API</h2>\n<p>The API consists of a primary draw method which accepts a configuration object, helper methods, and several microlibs.</p>\n<h3 id="example">Example</h3>\n<pre><code class="lang-javascript">  var\n    // Container div:\n    container = document.getElementById(&quot;flotr-example-graph&quot;),\n    // First data series:\n    d1 = [[0, 3], [4, 8], [8, 5], [9, 13]],\n    // Second data series:\n    d2 = [],\n    // A couple flotr configuration options:\n    options = {\n      xaxis: {\n        minorTickFreq: 4\n      }, \n      grid: {\n        minorVerticalLines: true\n      }\n    },\n    i, graph;\n\n  // Generated second data set:\n  for (i = 0; i &lt; 14; i += 0.5) {\n    d2.push([i, Math.sin(i)]);\n  }\n\n  // Draw the graph:\n  graph = Flotr.draw(\n    container,  // Container element\n    [ d1, d2 ], // Array of data series\n    options     // Configuration options\n  );\n</code></pre>\n<h3 id="microlibs">Microlibs</h3>\n<ul>\n<li><a href="http://documentcloud.github.com/underscore/">underscore.js</a></li>\n<li><a href="https://github.com/fat/bean">bean.js</a></li>\n</ul>\n<h2 id="extending">Extending</h2>\n<p>Flotr may be extended by adding new plugins and graph types.</p>\n<h3 id="graph-types">Graph Types</h3>\n<p>Graph types define how a particular chart is rendered.  Examples include line, bar, pie.</p>\n<p>Existing graph types are found in <code>js/types/</code>.</p>\n<h3 id="plugins">Plugins</h3>\n<p>Plugins extend the core of flotr with new functionality.  They can add interactions, new decorations, etc.  Examples \ninclude titles, labels and selection.</p>\n<p>The plugins included are found in <code>js/plugins/</code>.</p>\n<h2 id="development">Development</h2>\n<p>This project uses <a href="https://github.com/fat/smoosh">smoosh</a> to build and <a href="http://pivotal.github.com/jasmine/">jasmine</a> \nwith <a href="https://github.com/HumbleSoftware/js-imagediff">js-imagediff</a> to test.  Tests may be executed by \n<a href="http://johnbintz.github.com/jasmine-headless-webkit/">jasmine-headless-webkit</a> with \n<code>cd spec; jasmine-headless-webkit -j jasmine.yml -c</code> or by a browser by navigating to \n<code>flotr2/spec/SpecRunner.html</code>.</p>\n<h2 id="shoutouts">Shoutouts</h2>\n<p>Thanks to Bas Wenneker, Fabien Ménager and others for all the work on the original Flotr.\nThanks to Jochen Berger and Jordan Santell for their contributions to Flotr2.</p>\n',
    slug: 'flotr2',
    url: '/mypost/flotr2',
    preview: '<p>The Canvas graphing library. Flotr may be extended by adding new plugins and graph types.</p>\n<p><a href="/mypost/flotr2" title="Read more of Flotr2, a canvas graphing library">read more</a></p>' },
  { title: 'Extend your node requests',
    tags: [ 'node' ],
    category: 'node',
    date: Sun Jul 22 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>Jumps in your middleware and extends route requests with references</p>\n<h2 id="installation">Installation</h2>\n<p><code>npm install request-extend</code></p>\n<h2 id="methods">Methods</h2>\n<p><code>reqExtend([namespace,] object [, force]);</code>\nMerges <code>object</code>&#39;s keys and values with a routes request variable, which optionally can be contained under a property of <code>namespace</code>. <code>force</code> defaults to true, and controls whether or not <code>object</code> values should overwrite properties already on the request variable.</p>\n<h2 id="usage">Usage</h2>\n<pre><code class="lang-javascript```">var\n  express = require( &#39;express&#39; ),\n  reqExtend = require( &#39;request-extend&#39; ),\n  app = express.createServer();\n\nvar\n  models = {\n    user : require( &#39;./models/user&#39; ),\n    data : require( &#39;./models/data&#39; )\n  },\n  config = require( &#39;./config&#39; );\n\napp.configure(function () {\n  app.set( &#39;views&#39;, __dirname + &#39;/views&#39; );\n  app.set( &#39;view engine&#39;, &#39;jade&#39; );\n  app.use( reqExtend( &#39;models&#39;, models ));\n  app.use( reqExtend( &#39;config&#39;, config ));\n  app.use( express.static( __dirname + &#39;/public&#39; ));\n  app.use( app.router );\n});\n</code></pre>\n<p>Adds <code>req.models.user</code>, <code>req.models.data</code> and <code>req.config</code> to all requests in your routes.</p>\n<pre><code class="lang-javascript">app.get( &#39;/users&#39;, function ( req, res, next ) {\n  res.render( &#39;users&#39;, { users: req.models.user });\n});\n</code></pre>\n<h2 id="tests">Tests</h2>\n<p>Run <code>node tests/runTests.js</code> from project root -- testing uses <code>nodeunit</code></p>\n',
    slug: 'node-request-extend',
    url: '/mypost/node-request-extend',
    preview: '<p>Jumps in your middleware and extends route requests with references</p>\n<p><a href="/mypost/node-request-extend" title="Read more of Extend your node requests">read more</a></p>' },
  { title: 'JSON Front Matter in Node',
    tags: [ 'node', 'json' ],
    category: 'node',
    date: Fri Jul 20 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>Extract JSON front matter from strings and files in the style of <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">Jekyll&#39;s YAML Front Matter</a>.</p>\n<h3 id="installing">Installing</h3>\n<ul>\n<li><code>npm install json-front-matter</code></li>\n</ul>\n<h3 id="methods">Methods</h3>\n<ul>\n<li><code>parse( s )</code> Parses string <code>s</code>, returning an object with properties <code>attributes</code>, containing the JSON front matter, and <code>body</code> containing the rest.</li>\n<li><code>parseFile( path, callback( err, data ))</code> Parses file at <code>path</code>, calling the callback upon completion with <code>data</code> object containing <code>attribuets</code> and <code>body</code>, like the string parse method.</li>\n</ul>\n<h3 id="usage">Usage</h3>\n<pre><code class="lang-javascript">var fm = require(&#39;json-front-matter&#39;);\n\nvar string = &#39;{{{ &quot;title&quot; : &quot;some title&quot;, &quot;array&quot; : [ 1, 2, 3 ] }}} bodybodybody&#39;;\nvar out = fm.parse( string );\n\nconsole.log( out.body ) // &#39;bodybodybody&#39;\nconsole.log( out.attributes.title ) // &#39;some title&#39;\nconsole.log( out.attributes.array ) // [ 1, 2, 3 ]\n</code></pre>\n<h3 id="file-example">File Example</h3>\n<p>See <a href="https://raw.github.com/jsantell/node-json-front-matter/master/tests/data/test.md">./tests/data/test.md</a> for example of JSON Front Matter in a markdown file. The outer JSON is encapsulated via triple curly brackets. <code>{{{ &quot;tags&quot; : [ &#39;rock&#39;, &#39;paper&#39;, &#39;scissors&#39; ] }}}</code></p>\n<h2 id="testing">Testing</h2>\n<p>Run <code>node tests/runTests.js</code> from project root -- testing uses <code>nodeunit</code></p>\n',
    slug: 'node-json-front-matter',
    url: '/mypost/node-json-front-matter',
    preview: '<p>Extract JSON front matter from strings and files in the style of <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">Jekyll&#39;s YAML Front Matter</a>.</p>\n<p><a href="/mypost/node-json-front-matter" title="Read more of JSON Front Matter in Node">read more</a></p>' },
  { title: 'Image diffs in JS',
    tags: [ 'canvas', 'tools' ],
    category: 'canvas',
    date: Sun Jul 15 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>JavaScript / Canvas based imagediff utility.</p>\n<h2 id="api">API</h2>\n<ul>\n<li><code>createCanvas()</code> create a new Canvas element.</li>\n<li><code>createImageData(width, height)</code> create a new ImageData object.</li>\n<li><code>isImage(object)</code> tests for Image object.</li>\n<li><code>isCanvas(object)</code> tests for Canvas object.</li>\n<li><code>isContext(object)</code> tests for CanvasRenderingContext2D object.</li>\n<li><code>isImageData(object)</code> tests for ImageData object.</li>\n<li><code>isImageType(object)</code> tests for any of the above.</li>\n<li><code>toImageData(object)</code> converts image type object to a new ImageData object.</li>\n<li><code>equal(a, b, tolerance)</code> tests image type objects for equality; accepts tolerance in pixels.</li>\n<li><code>diff(a, b)</code> performs an image diff on a and b, returning a - b.</li>\n<li><code>noConflict()</code> removes imagediff from the global space for compatibility, returning imagediff.</li>\n<li><code>imageDataToPNG(imageData, outputFile, [callback])</code> (node only) renders the imageData to png in outputFile with optional callback.</li>\n</ul>\n<h2 id="nodejs">NodeJS</h2>\n<p>js-imagediff is available through the npm.  It uses <a href="https://github.com/LearnBoost/node-canvas">node-canvas</a> which requires lib cairo to be installed.\nInstall js-imagediff with <code>npm install -g imagediff</code>.</p>\n<h3 id="command-line">Command Line</h3>\n<ul>\n<li><code>imagediff [-e|equal] [-t|tolerance VALUE] FILE_A FILE_B</code> tests equality of two image files with an optional tolerance, printing &#39;true&#39; or &#39;false&#39;.</li>\n<li><code>imagediff [-d|diff] FILE_A FILE_B OUTPUT_FILE</code> renders an imagediff between two files, saving as the output file.</li>\n</ul>\n<h2 id="unit-testing-canvas">Unit Testing Canvas</h2>\n<p>JS ImageDiff opens up the easy testing of Canvas and other image-like objects in JavaScript.  js-imagediff supplies two Jasmine matchers to make this easier.</p>\n<ul>\n<li><code>toImageDiffEqual(expected, tolerance)</code> expect a result to equal another image type.</li>\n<li><code>toBeImageData()</code> expect a result to be ImageData.</li>\n</ul>\n<p>On failed tests, <code>toImageDiffEqual()</code> will display the expected image, the actual image and the imagediff of the two letting you easily spot mistakes.</p>\n<p>To use matchers:</p>\n<pre><code class="lang-javascript">  beforeEach(function () {\n    this.addMatchers(imagediff.jasmine);\n  });\n</code></pre>\n<h2 id="demo">Demo</h2>\n<ul>\n<li>A demo is available at <a href="http://humblesoftware.github.com/js-imagediff/">http://humblesoftware.github.com/js-imagediff/</a></li>\n<li>A Jasmine test demo is available at <a href="http://humblesoftware.github.com/js-imagediff/test.html">http://humblesoftware.github.com/js-imagediff/test.html</a></li>\n</ul>\n<h2 id="users">Users</h2>\n<ul>\n<li><a href="http://humblesoftware.com/flotr2/">Flotr2</a> - unit testing</li>\n<li><a href="https://github.com/HumbleSoftware/envisionjs">Envision.js</a> - unit testing</li>\n</ul>\n<p>If you are using js-imagediff pelase drop us a line and let us know what you are doing with it.</p>\n<h2 id="changelog">Changelog</h2>\n<p><h3>1.0.3</h3></p>\n<ul>\n<li>Added NPM/node.js support.</li>\n<li>Added command line interface for <code>equal</code> and <code>diff</code> methods.</li>\n<li>Added <code>imageDataToPNG</code> method for node environments.</li>\n<li>Added tolerance to handle lossy formats and provide option for acceptable difference.</li>\n</ul>\n<p><h3>1.0.2</h3></p>\n<ul>\n<li>Added optional width / height parameters to <code>createCanvas</code> for symmetry with <code>createImageData</code>.</li>\n<li>Fixed issue with <code>toImageDiffEqual()</code> matcher and non Node types - will no convert ImageData and contexts to Canvas elements for display.</li>\n</ul>\n<p><h3>1.0.1</h3></p>\n<ul>\n<li>Moved library to imagediff.js</li>\n<li>Added Jasmine matchers</li>\n<li>Minor bug fixes, lint fixes.</li>\n</ul>\n<h2 id="author">Author</h2>\n<p>Carl Sutherland carl@humblesoftware.com\n<a href="http://www.humblesoftware.com">http://www.humblesoftware.com</a></p>\n',
    slug: 'js-image-diff',
    url: '/mypost/js-image-diff',
    preview: '<p>JavaScript / Canvas based imagediff utility.</p>\n<p><a href="/mypost/js-image-diff" title="Read more of Image diffs in JS">read more</a></p>' } ]
[2014-02-13 18:39:41.864] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 18:40:18.608] [INFO] console - 团队介绍
[2014-02-13 18:40:18.609] [INFO] console - [ { title: '团队介绍',
    tags: [ 'node.js', 'express' ],
    category: '团队介绍',
    date: Thu Jan 16 2014 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>极限网络计算与服务科研团队目前由赵勇教授、文泉副教授、李玉喜副教授、田文洪副教授、陈娟副教授和薛瑞尼副教授组成。旨在以具有海外学习和工作经验背景的骨干教师为主，带领一批青年教师、博士研究生和硕士研究生，进行极限规模的网络计算与服务的研究开发，这一研究领域目前在国内外还处于初级阶段。我们现在处于一个数据爆炸，IT资源日趋集中整合，而各行业计算需求不断扩大的时代，团队借鉴海外先进的教学、科研和管理模式，培养一支具备相当研究实力的队伍，研发能够管理、调度极限规模的网络计算资源，和存储、处理海量数据（PB、EB甚至更大规模）的系统和产品。团队积极加强国际交流与合作，紧密跟踪国际相关领域的动态和研究进展，争取保持研究的国际领先性，为申请省部级、国家级相关研究平台创造条件，为我院和我校的科研建设贡献力量。团队研究的重心是能够管理调度超大规模的网络连接的资源，包括大规模集群、网格、云平台、超级计算机等，进行大规模计算、存储、数据处理和挖掘，并在此基础上提供服务。主要的研究方向包括云数据中心资源管理与调度，大规模任务调度处理、海量数据处理和数据挖掘以及海量分布式存储系统的研究。</p>\n<h3 id="-">团队特色</h3>\n<p>团队成员均于美国，加拿大学习工作多年，熟悉行业国际研究动态及国外科研开发过程\n有多年大规模系统设计或大规模数据处理经验，团队成员研究方向和领域互补性强\n有紧密的国际联系和项目合作</p>\n<h3 id="-">团队软硬件平台</h3>\n<p>包括IBM刀片服务器数台，Dell专业服务器数台和相关云计算管理需拟化软件，台式机器几十台。团队正与企业合作共建云存储平台100个节点（四个以上局域网）。团队利用以上资源已经建成VMware虚拟机和集群，Hadoop集群，微软高性能计算集群HPC等多个并行处理计算用平台。初步完成大规模云任务调度器，云模拟系统，云资源共享系统，物联网RFID中间件等多个应用平台。</p>\n<h3 id="-">研究方向</h3>\n<p>云数据资源中心调度与管理\n数万台甚至更多的计算机资源及相应的网络，存储设备\n弹性调度，资源合理利用，云服务可靠性，可用性，电力能源节省</p>\n<p>大规模任务调度处理\n数十万个计算节点\n分发效率，数据相关性，能源节省</p>\n<p>海量数据处理和数据挖掘\n网站日志，用户行为，用户发布的信息\n视频图像\n存储，索引架构，任务和数据耦合</p>\n<p>海量分布式存储系统\n传统数据库力不从心\n存储，索引，备份，处理\n结构，扩展性，一致性</p>\n',
    slug: '团队介绍',
    url: '/aboutUs/ourpost/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D',
    preview: '<p>极限网络计算与服务科研团队目前由赵勇教授、文泉副教授、李玉喜副教授、田文洪副教授、陈娟副教授和薛瑞尼副教授组成。旨在以具有海外学习和工作经验背景的骨干教师为主，带领一批青年教师、博士研究生和硕士研究生，进行极限规模的网络计算与服务的研究开发，这一研究领域目前在国内外还处于初级阶段。我们现在处于一个数据爆炸，IT资源日趋集中整合，而各行业计算需求不断扩大的时代，团队借鉴海外先进的教学、科研和管理模式，培养一支具备相当研究实力的队伍，研发能够管理、调度极限规模的网络计算资源，和存储、处理海量数据（PB、EB甚至更大规模）的系统和产品。团队积极加强国际交流与合作，紧密跟踪国际相关领域的动态和研究进展，争取保持研究的国际领先性，为申请省部级、国家级相关研究平台创造条件，为我院和我校的科研建设贡献力量。团队研究的重心是能够管理调度超大规模的网络连接的资源，包括大规模集群、网格、云平台、超级计算机等，进行大规模计算、存储、数据处理和挖掘，并在此基础上提供服务。主要的研究方向包括云数据中心资源管理与调度，大规模任务调度处理、海量数据处理和数据挖掘以及海量分布式存储系统的研究。</p>\n<p><a href="/aboutUs/ourpost/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D" title="Read more of 团队介绍">read more</a></p>' } ]
[2014-02-13 18:40:18.630] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 18:42:32.363] [INFO] console - 师资队伍
[2014-02-13 18:42:32.364] [INFO] console - [ { title: '师资队伍',
    tags: [ 'node.js', 'express' ],
    category: '师资队伍',
    date: Thu Jan 16 2014 00:00:00 GMT+0800 (中国标准时间),
    content: '',
    slug: '师资队伍',
    url: '/aboutUs/ourpost/%E5%B8%88%E8%B5%84%E9%98%9F%E4%BC%8D',
    preview: '<p><a href="/aboutUs/ourpost/%E5%B8%88%E8%B5%84%E9%98%9F%E4%BC%8D" title="Read more of 师资队伍">read more</a></p>' } ]
[2014-02-13 18:42:32.374] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 18:42:35.495] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 18:49:45.399] [INFO] console - 团队介绍
[2014-02-13 18:49:45.399] [INFO] console - [ { title: '团队介绍',
    tags: [ 'node.js', 'express' ],
    category: '团队介绍',
    date: Thu Jan 16 2014 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>极限网络计算与服务科研团队目前由赵勇教授、文泉副教授、李玉喜副教授、田文洪副教授、陈娟副教授和薛瑞尼副教授组成。旨在以具有海外学习和工作经验背景的骨干教师为主，带领一批青年教师、博士研究生和硕士研究生，进行极限规模的网络计算与服务的研究开发，这一研究领域目前在国内外还处于初级阶段。我们现在处于一个数据爆炸，IT资源日趋集中整合，而各行业计算需求不断扩大的时代，团队借鉴海外先进的教学、科研和管理模式，培养一支具备相当研究实力的队伍，研发能够管理、调度极限规模的网络计算资源，和存储、处理海量数据（PB、EB甚至更大规模）的系统和产品。团队积极加强国际交流与合作，紧密跟踪国际相关领域的动态和研究进展，争取保持研究的国际领先性，为申请省部级、国家级相关研究平台创造条件，为我院和我校的科研建设贡献力量。团队研究的重心是能够管理调度超大规模的网络连接的资源，包括大规模集群、网格、云平台、超级计算机等，进行大规模计算、存储、数据处理和挖掘，并在此基础上提供服务。主要的研究方向包括云数据中心资源管理与调度，大规模任务调度处理、海量数据处理和数据挖掘以及海量分布式存储系统的研究。</p>\n<h3 id="-">团队特色</h3>\n<p>团队成员均于美国，加拿大学习工作多年，熟悉行业国际研究动态及国外科研开发过程\n有多年大规模系统设计或大规模数据处理经验，团队成员研究方向和领域互补性强\n有紧密的国际联系和项目合作</p>\n<h3 id="-">团队软硬件平台</h3>\n<p>包括IBM刀片服务器数台，Dell专业服务器数台和相关云计算管理需拟化软件，台式机器几十台。团队正与企业合作共建云存储平台100个节点（四个以上局域网）。团队利用以上资源已经建成VMware虚拟机和集群，Hadoop集群，微软高性能计算集群HPC等多个并行处理计算用平台。初步完成大规模云任务调度器，云模拟系统，云资源共享系统，物联网RFID中间件等多个应用平台。</p>\n<h3 id="-">研究方向</h3>\n<p>云数据资源中心调度与管理\n数万台甚至更多的计算机资源及相应的网络，存储设备\n弹性调度，资源合理利用，云服务可靠性，可用性，电力能源节省</p>\n<p>大规模任务调度处理\n数十万个计算节点\n分发效率，数据相关性，能源节省</p>\n<p>海量数据处理和数据挖掘\n网站日志，用户行为，用户发布的信息\n视频图像\n存储，索引架构，任务和数据耦合</p>\n<p>海量分布式存储系统\n传统数据库力不从心\n存储，索引，备份，处理\n结构，扩展性，一致性</p>\n',
    slug: '团队介绍',
    url: '/aboutUs/ourpost/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D',
    preview: '<p>极限网络计算与服务科研团队目前由赵勇教授、文泉副教授、李玉喜副教授、田文洪副教授、陈娟副教授和薛瑞尼副教授组成。旨在以具有海外学习和工作经验背景的骨干教师为主，带领一批青年教师、博士研究生和硕士研究生，进行极限规模的网络计算与服务的研究开发，这一研究领域目前在国内外还处于初级阶段。我们现在处于一个数据爆炸，IT资源日趋集中整合，而各行业计算需求不断扩大的时代，团队借鉴海外先进的教学、科研和管理模式，培养一支具备相当研究实力的队伍，研发能够管理、调度极限规模的网络计算资源，和存储、处理海量数据（PB、EB甚至更大规模）的系统和产品。团队积极加强国际交流与合作，紧密跟踪国际相关领域的动态和研究进展，争取保持研究的国际领先性，为申请省部级、国家级相关研究平台创造条件，为我院和我校的科研建设贡献力量。团队研究的重心是能够管理调度超大规模的网络连接的资源，包括大规模集群、网格、云平台、超级计算机等，进行大规模计算、存储、数据处理和挖掘，并在此基础上提供服务。主要的研究方向包括云数据中心资源管理与调度，大规模任务调度处理、海量数据处理和数据挖掘以及海量分布式存储系统的研究。</p>\n<p><a href="/aboutUs/ourpost/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D" title="Read more of 团队介绍">read more</a></p>' } ]
[2014-02-13 18:49:45.420] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 18:49:47.630] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 19:21:30.484] [ERROR] console - hello world
[2014-02-13 19:21:41.112] [INFO] console - [ { title: 'Dancer.js, a high-level audio API',
    tags: [ 'web audio', 'audio data', 'webgl' ],
    category: 'audio',
    date: Mon Jul 30 2012 00:00:00 GMT+0800 (中国标准时间),
    preview: '<p>dancer.js is a high-level audio API, usable with both Mozilla&#39;s Audio Data API and Webkit&#39;s Web Audio API with flash fallback, designed to make sweet visualizations.\n<a href="http://jsantell.github.com/dancer.js">http://jsantell.github.com/dancer.js</a></p>\n<p><em>v0.2.1 (6/15/2012)</em></p>\n<p>Features</p>\n<hr>\n<ul>\n<li>Use real-time audio waveform and frequency data and map it to any arbitrary visualization</li>\n<li>Leverage beat detection into your visualizations</li>\n<li>Simple API to time callbacks and events to any section of a song</li>\n<li>Supports Web Audio (webkit), Audio Data (mozilla) and flash fallback (v9+)</li>\n<li>Extensible framework supporting plugins and custom behaviours</li>\n</ul>\n<p><a href="/mypost/dancer.js" title="Read more of Dancer.js, a high-level audio API">read more</a></p>',
    content: '<p>dancer.js is a high-level audio API, usable with both Mozilla&#39;s Audio Data API and Webkit&#39;s Web Audio API with flash fallback, designed to make sweet visualizations.</p>\n<script>\n  console.log(\'this is a script parse test\');\n</script>\n\n<p><a href="http://jsantell.github.com/dancer.js">http://jsantell.github.com/dancer.js</a></p>\n<p><em>v0.2.1 (6/15/2012)</em></p>\n<h2 id="features">Features</h2>\n<ul>\n<li>Use real-time audio waveform and frequency data and map it to any arbitrary visualization</li>\n<li>Leverage beat detection into your visualizations</li>\n<li>Simple API to time callbacks and events to any section of a song</li>\n<li>Supports Web Audio (webkit), Audio Data (mozilla) and flash fallback (v9+)</li>\n<li>Extensible framework supporting plugins and custom behaviours</li>\n</ul>\n<h2 id="dancer-instance-methods">Dancer Instance Methods</h2>\n<h3 id="controls">Controls</h3>\n<p>All controls return <code>this</code>.</p>\n<ul>\n<li><code>play()</code> plays the audio and begins the dance.</li>\n<li><code>stop()</code> stops the madness.</li>\n</ul>\n<h3 id="getters">Getters</h3>\n<ul>\n<li><code>getTime()</code> returns the current time.</li>\n<li><code>getWaveform()</code> returns the waveform data array (Float32Array(1024))</li>\n<li><code>getSpectrum()</code> returns the frequency data array (Float32Array(512)). </li>\n<li><code>getFrequency( freq [, endFreq ] )</code> returns the magnitude of a frequency or average over a range of frequencies.</li>\n<li><code>isLoaded()</code> returns a boolean value for the dancer instance&#39;s song load state.</li>\n<li><code>isPlaying()</code> returns a boolean value indicating whether the dancer instance&#39;s song is currently playing or not.</li>\n</ul>\n<h3 id="sections">Sections</h3>\n<p>All section methods return <code>this</code> (CHAIN IT UP) and callbacks executed with <code>this</code> referencing the dancer instance.</p>\n<ul>\n<li><code>after( t, callback )</code> fires callback on every frame after time <code>t</code>.</li>\n<li><code>before( t, callback )</code> fires callback on every frame before time <code>t</code>.</li>\n<li><code>between( t0, t1, callback )</code> fires callback on every frame between time <code>t0</code> and <code>t1</code>.</li>\n<li><code>onceAt( t, callback )</code> fires callback once at time <code>t</code>.</li>\n</ul>\n<h3 id="bindings">Bindings</h3>\n<p>Basic pub/sub to tie into the dancer instance. <code>update</code> and <code>loaded</code> are predefined events called within the framework that are published on every frame (update) and on audio file load (loaded). All callbacks executed with <code>this</code> referencing the dancer instance.</p>\n<ul>\n<li><code>bind( name, callback )</code> subscribes a callback of <code>name</code>. Can call this method several times to bind several callbacks of the same name.</li>\n<li><code>unbind( name )</code> unsubscribes all callbacks of <code>name</code>.</li>\n<li><code>trigger( name )</code> calls all callbacks of <code>name</code>.</li>\n</ul>\n<h3 id="beat">Beat</h3>\n<p>Beats are detected when the amplitude (normalized values between 0 and 1) of a specified frequency, or the max amplitude over a range, is greater than the minimum threshold, as well as greater than the previously registered beat&#39;s amplitude, which is decreased by the decay rate per frame.</p>\n<ul>\n<li><code>createBeat( options )</code> creates a new beat instance tied to the dancer instance, with an options object passed as an argument. Options listed below.<ul>\n<li><code>frequency</code> the frequency (element of the spectrum) to check for a spike. Can be a single frequency (number) or a range (2 element array) that uses the frequency with highest amplitude. Default: <code>[ 0, 10 ]</code></li>\n<li><code>threshold</code> the minimum amplitude of the frequency range in order for a beat to occur. Default: <code>0.3</code></li>\n<li><code>decay</code> the rate that the previously registered beat&#39;s amplitude is reduced by on every frame. Default: <code>0.02</code></li>\n<li><code>onBeat</code> the callback to be called when a beat is detected.</li>\n<li><code>offBeat</code> the callback to be called when there is no beat on the current frame.</li>\n</ul>\n</li>\n</ul>\n<h2 id="dancer-static-methods">Dancer Static Methods</h2>\n<ul>\n<li><code>addPlugin( name, fn )</code> registers a plugin of <code>name</code> with initiation function <code>fn</code> -- described in more detail below</li>\n<li><code>isSupported()</code> returns a string of <code>webaudio</code>, <code>audiodata</code> or <code>flash</code> indicating level of support. Returns an empty string if the browser doesn&#39;t support any of the methods. Can also return <code>null</code> when browser does not support typed arrays.</li>\n<li><code>canPlay( type )</code> returns either <code>true</code> or <code>false</code> indicating whether the browser supports playing back audio of type <code>type</code>, which can be a string of <code>&#39;mp3&#39;</code>, <code>&#39;ogg&#39;</code>, <code>&#39;wav&#39;</code>, or <code>&#39;aac&#39;</code>.</li>\n<li><code>setOptions( options )</code> takes a set of key-value pairs in an object for options. Options below.</li>\n</ul>\n<h3 id="dancer-options">Dancer Options</h3>\n<ul>\n<li><code>flashSWF</code> The path to soundmanager2.swf. Required for flash fallback.</li>\n<li><code>flashJS</code> The path to soundmanager2.js. Required for flash fallback.</li>\n</ul>\n<h2 id="dancer-constructor">Dancer Constructor</h2>\n<p><code>new Dancer( source, [ codecs ] )</code> returns a new <code>Dancer</code> instance -- takes a string of <code>source</code> as a path to the audio file. Optionally, you may pass in array of codec extensions of the form <code>[ &#39;mp3&#39;, &#39;ogg&#39; ]</code>, where the first supported codec is used and appended to source in the form <code>source + &#39;.&#39; + supportedCodec</code>.</p>\n<h2 id="beat-instance-methods">Beat Instance Methods</h2>\n<p>These methods can be called on a beat instance to turn on and off the registered callbacks</p>\n<ul>\n<li><code>on()</code> turns on the beat instance&#39;s callbacks and detections</li>\n<li><code>off()</code> turns off the beat instance&#39;s callbacks and detections</li>\n</ul>\n<h2 id="example">Example</h2>\n<p>For simple examples, check out the <code>examples/</code> folder -- both the FFT and waveform examples are straight forward, leveraging the corresponding plugins for visualizations.</p>\n<pre><code class="lang-javascript">  // To enable flash fallback, specify the paths for the flashSWF and flashJS\n  Dancer.setOptions({\n    flashJS  : &#39;../../lib/soundmanager2.js&#39;,\n    flashSWF : &#39;../../lib/soundmanager2.swf&#39;\n  });\n\n  var\n    dancer = new Dancer( &quot;sickjams.ogg&quot; ),\n    beat = dancer.createBeat({\n      onBeat: function ( mag ) {\n        console.log(&#39;Beat!&#39;);\n      },\n      offBeat: function ( mag ) {\n        console.log(&#39;no beat :(&#39;);\n      }\n    });\n\n  // Let&#39;s turn this beat on right away\n  beat.on();\n\n  dancer.onceAt( 10, function() {\n    // Let&#39;s set up some things once at 10 seconds\n  }).between( 10, 60, function() {\n    // After 10s, let&#39;s do something on every frame for the first minute\n  }).after( 60, function() {\n    // After 60s, let&#39;s get this real and map a frequency to an object&#39;s y position\n    // Note that the instance of dancer is bound to &quot;this&quot;\n    object.y = this.getFrequency( 400 );\n  }).onceAt( 120, function() {\n    // After 120s, we&#39;ll turn the beat off as another object&#39;s y position is still being mapped from the previous &quot;after&quot; method\n    beat.off();\n  });\n\n  dancer.play();\n</code></pre>\n<h2 id="requirements">Requirements</h2>\n<p><strong>HTML5 Playback with Web Audio or Audio Data</strong> Chrome and Firefox are both supported out of the box -- other browsers will need to leverage the flash fallback until either of these APIs are implemented.</p>\n<p><strong>To enable flash</strong> You must set Dancer&#39;s defaults for <code>flashSWF</code> with the path to the <code>soundmanager2.swf</code> and <code>flashJS</code> to the path to <code>soundmanager2.js</code>, both found in <code>lib/</code>. Flash player 9 is required, and you must provide an mp3 option. Waveform data in Flash is a 1024 Float32Array, but only the first 512 elements have values due to flash&#39;s computeSpectrum method.</p>\n<p><strong>Uint32Array and Float32Array are required</strong> Include a shim if you&#39;d like to support browsers that do not have these typed arrays.</p>\n<h2 id="dependencies">Dependencies</h2>\n<ul>\n<li><a href="https://github.com/corbanbrook/dsp.js/">dsp.js</a> - A subset of dsp.js (fft) is used for Fast Fourier Transformations ( Included in packaged Dancer )</li>\n<li><a href="http://www.featureblend.com/javascript-flash-detection-library.html">flash_detect</a> - flash detect is used for immediate flash detection ( Included in packaged Dancer )</li>\n<li><a href="https://github.com/scottschiller/SoundManager2">soundmanager2</a> - soundmanager2 is used for flash fallback ( found in <code>lib/</code>, asynchronously loaded )</li>\n</ul>\n<h2 id="extending-plugins">Extending/Plugins</h2>\n<p>You can extend the Dancer prototype by calling the static method <code>addPlugin( name, fn )</code>, which extends the Dancer prototype. A Dancer instance then can call the function provided in its context and subscribe to a preexisting event like <code>update</code>, or make your own. Look in the <code>plugins/</code> directory for examples. </p>\n<h2 id="development">Development</h2>\n<p>This project uses <a href="https://github.com/fat/smoosh">smoosh</a> to build and <a href="http://pivotal.github.com/jasmine/">jasmine</a> for testing. A CLI for testing would be awesome, but Mozilla and WebKit implementations differ greatly -- go to <code>spec/index.html</code> in Mozilla/WebKit browsers to test. All tests should pass in Chrome, Firefox, Opera and Safari, <em>although they can get weird</em>. Should consistently pass.</p>\n<h2 id="change-logs">Change Logs</h2>\n<p><strong>v0.2.1 (6/16/2012)</strong></p>\n<ul>\n<li>Added getWaveform() method and a corresponding visualization for waveforms</li>\n</ul>\n<p><strong>v0.2.0 (6/14/2012)</strong></p>\n<ul>\n<li>Added flash support with soundmanager2 -- flash_detect now included in build</li>\n<li>Added static methods <code>isSupported</code>, <code>canPlay</code> and <code>setOptions</code></li>\n<li>Added multiple audio codecs support (#7)</li>\n<li>Added a new simple FFT examples, both examples having feature detection and controls (#10)</li>\n<li>Fixed several Webkit bugs (#4, #8)</li>\n</ul>\n<p><strong>v0.1.0 (6/3/2012)</strong></p>\n<ul>\n<li>Initial Web Audio/ Audio Data release</li>\n</ul>\n',
    slug: 'dancer.js',
    url: '/mypost/dancer.js' },
  { title: 'Flotr2, a canvas graphing library',
    tags: [ 'charts', 'graph', 'canvas' ],
    category: 'canvas',
    date: Wed Jul 25 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>The Canvas graphing library. Flotr may be extended by adding new plugins and graph types.</p>\n<h2 id="api">API</h2>\n<p>The API consists of a primary draw method which accepts a configuration object, helper methods, and several microlibs.</p>\n<h3 id="example">Example</h3>\n<pre><code class="lang-javascript">  var\n    // Container div:\n    container = document.getElementById(&quot;flotr-example-graph&quot;),\n    // First data series:\n    d1 = [[0, 3], [4, 8], [8, 5], [9, 13]],\n    // Second data series:\n    d2 = [],\n    // A couple flotr configuration options:\n    options = {\n      xaxis: {\n        minorTickFreq: 4\n      }, \n      grid: {\n        minorVerticalLines: true\n      }\n    },\n    i, graph;\n\n  // Generated second data set:\n  for (i = 0; i &lt; 14; i += 0.5) {\n    d2.push([i, Math.sin(i)]);\n  }\n\n  // Draw the graph:\n  graph = Flotr.draw(\n    container,  // Container element\n    [ d1, d2 ], // Array of data series\n    options     // Configuration options\n  );\n</code></pre>\n<h3 id="microlibs">Microlibs</h3>\n<ul>\n<li><a href="http://documentcloud.github.com/underscore/">underscore.js</a></li>\n<li><a href="https://github.com/fat/bean">bean.js</a></li>\n</ul>\n<h2 id="extending">Extending</h2>\n<p>Flotr may be extended by adding new plugins and graph types.</p>\n<h3 id="graph-types">Graph Types</h3>\n<p>Graph types define how a particular chart is rendered.  Examples include line, bar, pie.</p>\n<p>Existing graph types are found in <code>js/types/</code>.</p>\n<h3 id="plugins">Plugins</h3>\n<p>Plugins extend the core of flotr with new functionality.  They can add interactions, new decorations, etc.  Examples \ninclude titles, labels and selection.</p>\n<p>The plugins included are found in <code>js/plugins/</code>.</p>\n<h2 id="development">Development</h2>\n<p>This project uses <a href="https://github.com/fat/smoosh">smoosh</a> to build and <a href="http://pivotal.github.com/jasmine/">jasmine</a> \nwith <a href="https://github.com/HumbleSoftware/js-imagediff">js-imagediff</a> to test.  Tests may be executed by \n<a href="http://johnbintz.github.com/jasmine-headless-webkit/">jasmine-headless-webkit</a> with \n<code>cd spec; jasmine-headless-webkit -j jasmine.yml -c</code> or by a browser by navigating to \n<code>flotr2/spec/SpecRunner.html</code>.</p>\n<h2 id="shoutouts">Shoutouts</h2>\n<p>Thanks to Bas Wenneker, Fabien Ménager and others for all the work on the original Flotr.\nThanks to Jochen Berger and Jordan Santell for their contributions to Flotr2.</p>\n',
    slug: 'flotr2',
    url: '/mypost/flotr2',
    preview: '<p>The Canvas graphing library. Flotr may be extended by adding new plugins and graph types.</p>\n<p><a href="/mypost/flotr2" title="Read more of Flotr2, a canvas graphing library">read more</a></p>' },
  { title: 'Extend your node requests',
    tags: [ 'node' ],
    category: 'node',
    date: Sun Jul 22 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>Jumps in your middleware and extends route requests with references</p>\n<h2 id="installation">Installation</h2>\n<p><code>npm install request-extend</code></p>\n<h2 id="methods">Methods</h2>\n<p><code>reqExtend([namespace,] object [, force]);</code>\nMerges <code>object</code>&#39;s keys and values with a routes request variable, which optionally can be contained under a property of <code>namespace</code>. <code>force</code> defaults to true, and controls whether or not <code>object</code> values should overwrite properties already on the request variable.</p>\n<h2 id="usage">Usage</h2>\n<pre><code class="lang-javascript```">var\n  express = require( &#39;express&#39; ),\n  reqExtend = require( &#39;request-extend&#39; ),\n  app = express.createServer();\n\nvar\n  models = {\n    user : require( &#39;./models/user&#39; ),\n    data : require( &#39;./models/data&#39; )\n  },\n  config = require( &#39;./config&#39; );\n\napp.configure(function () {\n  app.set( &#39;views&#39;, __dirname + &#39;/views&#39; );\n  app.set( &#39;view engine&#39;, &#39;jade&#39; );\n  app.use( reqExtend( &#39;models&#39;, models ));\n  app.use( reqExtend( &#39;config&#39;, config ));\n  app.use( express.static( __dirname + &#39;/public&#39; ));\n  app.use( app.router );\n});\n</code></pre>\n<p>Adds <code>req.models.user</code>, <code>req.models.data</code> and <code>req.config</code> to all requests in your routes.</p>\n<pre><code class="lang-javascript">app.get( &#39;/users&#39;, function ( req, res, next ) {\n  res.render( &#39;users&#39;, { users: req.models.user });\n});\n</code></pre>\n<h2 id="tests">Tests</h2>\n<p>Run <code>node tests/runTests.js</code> from project root -- testing uses <code>nodeunit</code></p>\n',
    slug: 'node-request-extend',
    url: '/mypost/node-request-extend',
    preview: '<p>Jumps in your middleware and extends route requests with references</p>\n<p><a href="/mypost/node-request-extend" title="Read more of Extend your node requests">read more</a></p>' },
  { title: 'JSON Front Matter in Node',
    tags: [ 'node', 'json' ],
    category: 'node',
    date: Fri Jul 20 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>Extract JSON front matter from strings and files in the style of <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">Jekyll&#39;s YAML Front Matter</a>.</p>\n<h3 id="installing">Installing</h3>\n<ul>\n<li><code>npm install json-front-matter</code></li>\n</ul>\n<h3 id="methods">Methods</h3>\n<ul>\n<li><code>parse( s )</code> Parses string <code>s</code>, returning an object with properties <code>attributes</code>, containing the JSON front matter, and <code>body</code> containing the rest.</li>\n<li><code>parseFile( path, callback( err, data ))</code> Parses file at <code>path</code>, calling the callback upon completion with <code>data</code> object containing <code>attribuets</code> and <code>body</code>, like the string parse method.</li>\n</ul>\n<h3 id="usage">Usage</h3>\n<pre><code class="lang-javascript">var fm = require(&#39;json-front-matter&#39;);\n\nvar string = &#39;{{{ &quot;title&quot; : &quot;some title&quot;, &quot;array&quot; : [ 1, 2, 3 ] }}} bodybodybody&#39;;\nvar out = fm.parse( string );\n\nconsole.log( out.body ) // &#39;bodybodybody&#39;\nconsole.log( out.attributes.title ) // &#39;some title&#39;\nconsole.log( out.attributes.array ) // [ 1, 2, 3 ]\n</code></pre>\n<h3 id="file-example">File Example</h3>\n<p>See <a href="https://raw.github.com/jsantell/node-json-front-matter/master/tests/data/test.md">./tests/data/test.md</a> for example of JSON Front Matter in a markdown file. The outer JSON is encapsulated via triple curly brackets. <code>{{{ &quot;tags&quot; : [ &#39;rock&#39;, &#39;paper&#39;, &#39;scissors&#39; ] }}}</code></p>\n<h2 id="testing">Testing</h2>\n<p>Run <code>node tests/runTests.js</code> from project root -- testing uses <code>nodeunit</code></p>\n',
    slug: 'node-json-front-matter',
    url: '/mypost/node-json-front-matter',
    preview: '<p>Extract JSON front matter from strings and files in the style of <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">Jekyll&#39;s YAML Front Matter</a>.</p>\n<p><a href="/mypost/node-json-front-matter" title="Read more of JSON Front Matter in Node">read more</a></p>' },
  { title: 'Image diffs in JS',
    tags: [ 'canvas', 'tools' ],
    category: 'canvas',
    date: Sun Jul 15 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>JavaScript / Canvas based imagediff utility.</p>\n<h2 id="api">API</h2>\n<ul>\n<li><code>createCanvas()</code> create a new Canvas element.</li>\n<li><code>createImageData(width, height)</code> create a new ImageData object.</li>\n<li><code>isImage(object)</code> tests for Image object.</li>\n<li><code>isCanvas(object)</code> tests for Canvas object.</li>\n<li><code>isContext(object)</code> tests for CanvasRenderingContext2D object.</li>\n<li><code>isImageData(object)</code> tests for ImageData object.</li>\n<li><code>isImageType(object)</code> tests for any of the above.</li>\n<li><code>toImageData(object)</code> converts image type object to a new ImageData object.</li>\n<li><code>equal(a, b, tolerance)</code> tests image type objects for equality; accepts tolerance in pixels.</li>\n<li><code>diff(a, b)</code> performs an image diff on a and b, returning a - b.</li>\n<li><code>noConflict()</code> removes imagediff from the global space for compatibility, returning imagediff.</li>\n<li><code>imageDataToPNG(imageData, outputFile, [callback])</code> (node only) renders the imageData to png in outputFile with optional callback.</li>\n</ul>\n<h2 id="nodejs">NodeJS</h2>\n<p>js-imagediff is available through the npm.  It uses <a href="https://github.com/LearnBoost/node-canvas">node-canvas</a> which requires lib cairo to be installed.\nInstall js-imagediff with <code>npm install -g imagediff</code>.</p>\n<h3 id="command-line">Command Line</h3>\n<ul>\n<li><code>imagediff [-e|equal] [-t|tolerance VALUE] FILE_A FILE_B</code> tests equality of two image files with an optional tolerance, printing &#39;true&#39; or &#39;false&#39;.</li>\n<li><code>imagediff [-d|diff] FILE_A FILE_B OUTPUT_FILE</code> renders an imagediff between two files, saving as the output file.</li>\n</ul>\n<h2 id="unit-testing-canvas">Unit Testing Canvas</h2>\n<p>JS ImageDiff opens up the easy testing of Canvas and other image-like objects in JavaScript.  js-imagediff supplies two Jasmine matchers to make this easier.</p>\n<ul>\n<li><code>toImageDiffEqual(expected, tolerance)</code> expect a result to equal another image type.</li>\n<li><code>toBeImageData()</code> expect a result to be ImageData.</li>\n</ul>\n<p>On failed tests, <code>toImageDiffEqual()</code> will display the expected image, the actual image and the imagediff of the two letting you easily spot mistakes.</p>\n<p>To use matchers:</p>\n<pre><code class="lang-javascript">  beforeEach(function () {\n    this.addMatchers(imagediff.jasmine);\n  });\n</code></pre>\n<h2 id="demo">Demo</h2>\n<ul>\n<li>A demo is available at <a href="http://humblesoftware.github.com/js-imagediff/">http://humblesoftware.github.com/js-imagediff/</a></li>\n<li>A Jasmine test demo is available at <a href="http://humblesoftware.github.com/js-imagediff/test.html">http://humblesoftware.github.com/js-imagediff/test.html</a></li>\n</ul>\n<h2 id="users">Users</h2>\n<ul>\n<li><a href="http://humblesoftware.com/flotr2/">Flotr2</a> - unit testing</li>\n<li><a href="https://github.com/HumbleSoftware/envisionjs">Envision.js</a> - unit testing</li>\n</ul>\n<p>If you are using js-imagediff pelase drop us a line and let us know what you are doing with it.</p>\n<h2 id="changelog">Changelog</h2>\n<p><h3>1.0.3</h3></p>\n<ul>\n<li>Added NPM/node.js support.</li>\n<li>Added command line interface for <code>equal</code> and <code>diff</code> methods.</li>\n<li>Added <code>imageDataToPNG</code> method for node environments.</li>\n<li>Added tolerance to handle lossy formats and provide option for acceptable difference.</li>\n</ul>\n<p><h3>1.0.2</h3></p>\n<ul>\n<li>Added optional width / height parameters to <code>createCanvas</code> for symmetry with <code>createImageData</code>.</li>\n<li>Fixed issue with <code>toImageDiffEqual()</code> matcher and non Node types - will no convert ImageData and contexts to Canvas elements for display.</li>\n</ul>\n<p><h3>1.0.1</h3></p>\n<ul>\n<li>Moved library to imagediff.js</li>\n<li>Added Jasmine matchers</li>\n<li>Minor bug fixes, lint fixes.</li>\n</ul>\n<h2 id="author">Author</h2>\n<p>Carl Sutherland carl@humblesoftware.com\n<a href="http://www.humblesoftware.com">http://www.humblesoftware.com</a></p>\n',
    slug: 'js-image-diff',
    url: '/mypost/js-image-diff',
    preview: '<p>JavaScript / Canvas based imagediff utility.</p>\n<p><a href="/mypost/js-image-diff" title="Read more of Image diffs in JS">read more</a></p>' } ]
[2014-02-13 19:21:41.688] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 19:21:45.633] [INFO] console - 团队介绍
[2014-02-13 19:21:45.633] [INFO] console - [ { title: '团队介绍',
    tags: [ 'node.js', 'express' ],
    category: '团队介绍',
    date: Thu Jan 16 2014 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>极限网络计算与服务科研团队目前由赵勇教授、文泉副教授、李玉喜副教授、田文洪副教授、陈娟副教授和薛瑞尼副教授组成。旨在以具有海外学习和工作经验背景的骨干教师为主，带领一批青年教师、博士研究生和硕士研究生，进行极限规模的网络计算与服务的研究开发，这一研究领域目前在国内外还处于初级阶段。我们现在处于一个数据爆炸，IT资源日趋集中整合，而各行业计算需求不断扩大的时代，团队借鉴海外先进的教学、科研和管理模式，培养一支具备相当研究实力的队伍，研发能够管理、调度极限规模的网络计算资源，和存储、处理海量数据（PB、EB甚至更大规模）的系统和产品。团队积极加强国际交流与合作，紧密跟踪国际相关领域的动态和研究进展，争取保持研究的国际领先性，为申请省部级、国家级相关研究平台创造条件，为我院和我校的科研建设贡献力量。团队研究的重心是能够管理调度超大规模的网络连接的资源，包括大规模集群、网格、云平台、超级计算机等，进行大规模计算、存储、数据处理和挖掘，并在此基础上提供服务。主要的研究方向包括云数据中心资源管理与调度，大规模任务调度处理、海量数据处理和数据挖掘以及海量分布式存储系统的研究。</p>\n<hr>\n<h2 id="-">团队特色</h2>\n<ul>\n<li>团队成员均于美国，加拿大学习工作多年，熟悉行业国际研究动态及国外科研开发过程</li>\n<li>有多年大规模系统设计或大规模数据处理经验，团队成员研究方向和领域互补性强</li>\n<li>有紧密的国际联系和项目合作</li>\n</ul>\n<hr>\n<h2 id="-">团队软硬件平台</h2>\n<ul>\n<li>包括IBM刀片服务器数台，Dell专业服务器数台和相关云计算管理需拟化软件，台式机器几十台。团队正与企业合作共建云存储平台100个节点（四个以上局域网）。团队利用以上资源已经建成VMware虚拟机和集群，Hadoop集群，微软高性能计算集群HPC等多个并行处理计算用平台。初步完成大规模云任务调度器，云模拟系统，云资源共享系统，物联网RFID中间件等多个应用平台。</li>\n</ul>\n<hr>\n<h2 id="-">研究方向</h2>\n<ul>\n<li><p><strong>云数据资源中心调度与管理</strong></p>\n<ul>\n<li>数万台甚至更多的计算机资源及相应的网络，存储设备</li>\n<li>弹性调度，资源合理利用，云服务可靠性，可用性，电力能源节省</li>\n</ul>\n</li>\n<li><p><strong>大规模任务调度处理</strong></p>\n<ul>\n<li>数十万个计算节点</li>\n<li>分发效率，数据相关性，能源节省</li>\n</ul>\n</li>\n<li><p><strong>海量数据处理和数据挖掘</strong></p>\n<ul>\n<li>网站日志，用户行为，用户发布的信息</li>\n<li>视频图像</li>\n<li>存储，索引架构，任务和数据耦合</li>\n</ul>\n</li>\n<li><p><strong>海量分布式存储系统</strong></p>\n<ul>\n<li>传统数据库力不从心</li>\n<li>存储，索引，备份，处理</li>\n<li>结构，扩展性，一致性</li>\n</ul>\n</li>\n</ul>\n',
    slug: '团队介绍',
    url: '/aboutUs/ourpost/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D',
    preview: '<p>极限网络计算与服务科研团队目前由赵勇教授、文泉副教授、李玉喜副教授、田文洪副教授、陈娟副教授和薛瑞尼副教授组成。旨在以具有海外学习和工作经验背景的骨干教师为主，带领一批青年教师、博士研究生和硕士研究生，进行极限规模的网络计算与服务的研究开发，这一研究领域目前在国内外还处于初级阶段。我们现在处于一个数据爆炸，IT资源日趋集中整合，而各行业计算需求不断扩大的时代，团队借鉴海外先进的教学、科研和管理模式，培养一支具备相当研究实力的队伍，研发能够管理、调度极限规模的网络计算资源，和存储、处理海量数据（PB、EB甚至更大规模）的系统和产品。团队积极加强国际交流与合作，紧密跟踪国际相关领域的动态和研究进展，争取保持研究的国际领先性，为申请省部级、国家级相关研究平台创造条件，为我院和我校的科研建设贡献力量。团队研究的重心是能够管理调度超大规模的网络连接的资源，包括大规模集群、网格、云平台、超级计算机等，进行大规模计算、存储、数据处理和挖掘，并在此基础上提供服务。主要的研究方向包括云数据中心资源管理与调度，大规模任务调度处理、海量数据处理和数据挖掘以及海量分布式存储系统的研究。</p>\n<p><a href="/aboutUs/ourpost/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D" title="Read more of 团队介绍">read more</a></p>' } ]
[2014-02-13 19:21:45.659] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 19:21:48.020] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 19:24:08.102] [ERROR] console - hello world
[2014-02-13 19:24:12.739] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 19:24:12.967] [ERROR] console - TypeError: F:\newCode\Node app\blog-poet\views\post.jade:12
    10|       != post.content
    11|     div.tags
  > 12|       - each tag in post.tags
    13|         a(href=tagUrl(tag))
    14|           span.label.label-info #{tag}
    15| 

Cannot read property 'length' of undefined
    at jade_debug.unshift.lineno (eval at <anonymous> (F:\newCode\Node app\blog-poet\node_modules\jade\lib\jade.js:160:8), <anonymous>:766:31)
    at eval (eval at <anonymous> (F:\newCode\Node app\blog-poet\node_modules\jade\lib\jade.js:160:8), <anonymous>:815:4)
    at res (F:\newCode\Node app\blog-poet\node_modules\jade\lib\jade.js:161:38)
    at Object.exports.render (F:\newCode\Node app\blog-poet\node_modules\jade\lib\jade.js:257:10)
    at Object.exports.renderFile (F:\newCode\Node app\blog-poet\node_modules\jade\lib\jade.js:293:18)
    at View.exports.renderFile [as engine] (F:\newCode\Node app\blog-poet\node_modules\jade\lib\jade.js:278:21)
    at View.render (F:\newCode\Node app\blog-poet\node_modules\express\lib\view.js:76:8)
    at Function.app.render (F:\newCode\Node app\blog-poet\node_modules\express\lib\application.js:504:10)
    at ServerResponse.res.render (F:\newCode\Node app\blog-poet\node_modules\express\lib\response.js:798:7)
    at F:\newCode\Node app\blog-poet\app.js:120:13
[2014-02-13 19:24:16.628] [INFO] console - [ { title: 'Dancer.js, a high-level audio API',
    tags: [ 'web audio', 'audio data', 'webgl' ],
    category: 'audio',
    date: Mon Jul 30 2012 00:00:00 GMT+0800 (中国标准时间),
    preview: '<p>dancer.js is a high-level audio API, usable with both Mozilla&#39;s Audio Data API and Webkit&#39;s Web Audio API with flash fallback, designed to make sweet visualizations.\n<a href="http://jsantell.github.com/dancer.js">http://jsantell.github.com/dancer.js</a></p>\n<p><em>v0.2.1 (6/15/2012)</em></p>\n<p>Features</p>\n<hr>\n<ul>\n<li>Use real-time audio waveform and frequency data and map it to any arbitrary visualization</li>\n<li>Leverage beat detection into your visualizations</li>\n<li>Simple API to time callbacks and events to any section of a song</li>\n<li>Supports Web Audio (webkit), Audio Data (mozilla) and flash fallback (v9+)</li>\n<li>Extensible framework supporting plugins and custom behaviours</li>\n</ul>\n<p><a href="/mypost/dancer.js" title="Read more of Dancer.js, a high-level audio API">read more</a></p>',
    content: '<p>dancer.js is a high-level audio API, usable with both Mozilla&#39;s Audio Data API and Webkit&#39;s Web Audio API with flash fallback, designed to make sweet visualizations.</p>\n<script>\n  console.log(\'this is a script parse test\');\n</script>\n\n<p><a href="http://jsantell.github.com/dancer.js">http://jsantell.github.com/dancer.js</a></p>\n<p><em>v0.2.1 (6/15/2012)</em></p>\n<h2 id="features">Features</h2>\n<ul>\n<li>Use real-time audio waveform and frequency data and map it to any arbitrary visualization</li>\n<li>Leverage beat detection into your visualizations</li>\n<li>Simple API to time callbacks and events to any section of a song</li>\n<li>Supports Web Audio (webkit), Audio Data (mozilla) and flash fallback (v9+)</li>\n<li>Extensible framework supporting plugins and custom behaviours</li>\n</ul>\n<h2 id="dancer-instance-methods">Dancer Instance Methods</h2>\n<h3 id="controls">Controls</h3>\n<p>All controls return <code>this</code>.</p>\n<ul>\n<li><code>play()</code> plays the audio and begins the dance.</li>\n<li><code>stop()</code> stops the madness.</li>\n</ul>\n<h3 id="getters">Getters</h3>\n<ul>\n<li><code>getTime()</code> returns the current time.</li>\n<li><code>getWaveform()</code> returns the waveform data array (Float32Array(1024))</li>\n<li><code>getSpectrum()</code> returns the frequency data array (Float32Array(512)). </li>\n<li><code>getFrequency( freq [, endFreq ] )</code> returns the magnitude of a frequency or average over a range of frequencies.</li>\n<li><code>isLoaded()</code> returns a boolean value for the dancer instance&#39;s song load state.</li>\n<li><code>isPlaying()</code> returns a boolean value indicating whether the dancer instance&#39;s song is currently playing or not.</li>\n</ul>\n<h3 id="sections">Sections</h3>\n<p>All section methods return <code>this</code> (CHAIN IT UP) and callbacks executed with <code>this</code> referencing the dancer instance.</p>\n<ul>\n<li><code>after( t, callback )</code> fires callback on every frame after time <code>t</code>.</li>\n<li><code>before( t, callback )</code> fires callback on every frame before time <code>t</code>.</li>\n<li><code>between( t0, t1, callback )</code> fires callback on every frame between time <code>t0</code> and <code>t1</code>.</li>\n<li><code>onceAt( t, callback )</code> fires callback once at time <code>t</code>.</li>\n</ul>\n<h3 id="bindings">Bindings</h3>\n<p>Basic pub/sub to tie into the dancer instance. <code>update</code> and <code>loaded</code> are predefined events called within the framework that are published on every frame (update) and on audio file load (loaded). All callbacks executed with <code>this</code> referencing the dancer instance.</p>\n<ul>\n<li><code>bind( name, callback )</code> subscribes a callback of <code>name</code>. Can call this method several times to bind several callbacks of the same name.</li>\n<li><code>unbind( name )</code> unsubscribes all callbacks of <code>name</code>.</li>\n<li><code>trigger( name )</code> calls all callbacks of <code>name</code>.</li>\n</ul>\n<h3 id="beat">Beat</h3>\n<p>Beats are detected when the amplitude (normalized values between 0 and 1) of a specified frequency, or the max amplitude over a range, is greater than the minimum threshold, as well as greater than the previously registered beat&#39;s amplitude, which is decreased by the decay rate per frame.</p>\n<ul>\n<li><code>createBeat( options )</code> creates a new beat instance tied to the dancer instance, with an options object passed as an argument. Options listed below.<ul>\n<li><code>frequency</code> the frequency (element of the spectrum) to check for a spike. Can be a single frequency (number) or a range (2 element array) that uses the frequency with highest amplitude. Default: <code>[ 0, 10 ]</code></li>\n<li><code>threshold</code> the minimum amplitude of the frequency range in order for a beat to occur. Default: <code>0.3</code></li>\n<li><code>decay</code> the rate that the previously registered beat&#39;s amplitude is reduced by on every frame. Default: <code>0.02</code></li>\n<li><code>onBeat</code> the callback to be called when a beat is detected.</li>\n<li><code>offBeat</code> the callback to be called when there is no beat on the current frame.</li>\n</ul>\n</li>\n</ul>\n<h2 id="dancer-static-methods">Dancer Static Methods</h2>\n<ul>\n<li><code>addPlugin( name, fn )</code> registers a plugin of <code>name</code> with initiation function <code>fn</code> -- described in more detail below</li>\n<li><code>isSupported()</code> returns a string of <code>webaudio</code>, <code>audiodata</code> or <code>flash</code> indicating level of support. Returns an empty string if the browser doesn&#39;t support any of the methods. Can also return <code>null</code> when browser does not support typed arrays.</li>\n<li><code>canPlay( type )</code> returns either <code>true</code> or <code>false</code> indicating whether the browser supports playing back audio of type <code>type</code>, which can be a string of <code>&#39;mp3&#39;</code>, <code>&#39;ogg&#39;</code>, <code>&#39;wav&#39;</code>, or <code>&#39;aac&#39;</code>.</li>\n<li><code>setOptions( options )</code> takes a set of key-value pairs in an object for options. Options below.</li>\n</ul>\n<h3 id="dancer-options">Dancer Options</h3>\n<ul>\n<li><code>flashSWF</code> The path to soundmanager2.swf. Required for flash fallback.</li>\n<li><code>flashJS</code> The path to soundmanager2.js. Required for flash fallback.</li>\n</ul>\n<h2 id="dancer-constructor">Dancer Constructor</h2>\n<p><code>new Dancer( source, [ codecs ] )</code> returns a new <code>Dancer</code> instance -- takes a string of <code>source</code> as a path to the audio file. Optionally, you may pass in array of codec extensions of the form <code>[ &#39;mp3&#39;, &#39;ogg&#39; ]</code>, where the first supported codec is used and appended to source in the form <code>source + &#39;.&#39; + supportedCodec</code>.</p>\n<h2 id="beat-instance-methods">Beat Instance Methods</h2>\n<p>These methods can be called on a beat instance to turn on and off the registered callbacks</p>\n<ul>\n<li><code>on()</code> turns on the beat instance&#39;s callbacks and detections</li>\n<li><code>off()</code> turns off the beat instance&#39;s callbacks and detections</li>\n</ul>\n<h2 id="example">Example</h2>\n<p>For simple examples, check out the <code>examples/</code> folder -- both the FFT and waveform examples are straight forward, leveraging the corresponding plugins for visualizations.</p>\n<pre><code class="lang-javascript">  // To enable flash fallback, specify the paths for the flashSWF and flashJS\n  Dancer.setOptions({\n    flashJS  : &#39;../../lib/soundmanager2.js&#39;,\n    flashSWF : &#39;../../lib/soundmanager2.swf&#39;\n  });\n\n  var\n    dancer = new Dancer( &quot;sickjams.ogg&quot; ),\n    beat = dancer.createBeat({\n      onBeat: function ( mag ) {\n        console.log(&#39;Beat!&#39;);\n      },\n      offBeat: function ( mag ) {\n        console.log(&#39;no beat :(&#39;);\n      }\n    });\n\n  // Let&#39;s turn this beat on right away\n  beat.on();\n\n  dancer.onceAt( 10, function() {\n    // Let&#39;s set up some things once at 10 seconds\n  }).between( 10, 60, function() {\n    // After 10s, let&#39;s do something on every frame for the first minute\n  }).after( 60, function() {\n    // After 60s, let&#39;s get this real and map a frequency to an object&#39;s y position\n    // Note that the instance of dancer is bound to &quot;this&quot;\n    object.y = this.getFrequency( 400 );\n  }).onceAt( 120, function() {\n    // After 120s, we&#39;ll turn the beat off as another object&#39;s y position is still being mapped from the previous &quot;after&quot; method\n    beat.off();\n  });\n\n  dancer.play();\n</code></pre>\n<h2 id="requirements">Requirements</h2>\n<p><strong>HTML5 Playback with Web Audio or Audio Data</strong> Chrome and Firefox are both supported out of the box -- other browsers will need to leverage the flash fallback until either of these APIs are implemented.</p>\n<p><strong>To enable flash</strong> You must set Dancer&#39;s defaults for <code>flashSWF</code> with the path to the <code>soundmanager2.swf</code> and <code>flashJS</code> to the path to <code>soundmanager2.js</code>, both found in <code>lib/</code>. Flash player 9 is required, and you must provide an mp3 option. Waveform data in Flash is a 1024 Float32Array, but only the first 512 elements have values due to flash&#39;s computeSpectrum method.</p>\n<p><strong>Uint32Array and Float32Array are required</strong> Include a shim if you&#39;d like to support browsers that do not have these typed arrays.</p>\n<h2 id="dependencies">Dependencies</h2>\n<ul>\n<li><a href="https://github.com/corbanbrook/dsp.js/">dsp.js</a> - A subset of dsp.js (fft) is used for Fast Fourier Transformations ( Included in packaged Dancer )</li>\n<li><a href="http://www.featureblend.com/javascript-flash-detection-library.html">flash_detect</a> - flash detect is used for immediate flash detection ( Included in packaged Dancer )</li>\n<li><a href="https://github.com/scottschiller/SoundManager2">soundmanager2</a> - soundmanager2 is used for flash fallback ( found in <code>lib/</code>, asynchronously loaded )</li>\n</ul>\n<h2 id="extending-plugins">Extending/Plugins</h2>\n<p>You can extend the Dancer prototype by calling the static method <code>addPlugin( name, fn )</code>, which extends the Dancer prototype. A Dancer instance then can call the function provided in its context and subscribe to a preexisting event like <code>update</code>, or make your own. Look in the <code>plugins/</code> directory for examples. </p>\n<h2 id="development">Development</h2>\n<p>This project uses <a href="https://github.com/fat/smoosh">smoosh</a> to build and <a href="http://pivotal.github.com/jasmine/">jasmine</a> for testing. A CLI for testing would be awesome, but Mozilla and WebKit implementations differ greatly -- go to <code>spec/index.html</code> in Mozilla/WebKit browsers to test. All tests should pass in Chrome, Firefox, Opera and Safari, <em>although they can get weird</em>. Should consistently pass.</p>\n<h2 id="change-logs">Change Logs</h2>\n<p><strong>v0.2.1 (6/16/2012)</strong></p>\n<ul>\n<li>Added getWaveform() method and a corresponding visualization for waveforms</li>\n</ul>\n<p><strong>v0.2.0 (6/14/2012)</strong></p>\n<ul>\n<li>Added flash support with soundmanager2 -- flash_detect now included in build</li>\n<li>Added static methods <code>isSupported</code>, <code>canPlay</code> and <code>setOptions</code></li>\n<li>Added multiple audio codecs support (#7)</li>\n<li>Added a new simple FFT examples, both examples having feature detection and controls (#10)</li>\n<li>Fixed several Webkit bugs (#4, #8)</li>\n</ul>\n<p><strong>v0.1.0 (6/3/2012)</strong></p>\n<ul>\n<li>Initial Web Audio/ Audio Data release</li>\n</ul>\n',
    slug: 'dancer.js',
    url: '/mypost/dancer.js' },
  { title: 'Flotr2, a canvas graphing library',
    tags: [ 'charts', 'graph', 'canvas' ],
    category: 'canvas',
    date: Wed Jul 25 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>The Canvas graphing library. Flotr may be extended by adding new plugins and graph types.</p>\n<h2 id="api">API</h2>\n<p>The API consists of a primary draw method which accepts a configuration object, helper methods, and several microlibs.</p>\n<h3 id="example">Example</h3>\n<pre><code class="lang-javascript">  var\n    // Container div:\n    container = document.getElementById(&quot;flotr-example-graph&quot;),\n    // First data series:\n    d1 = [[0, 3], [4, 8], [8, 5], [9, 13]],\n    // Second data series:\n    d2 = [],\n    // A couple flotr configuration options:\n    options = {\n      xaxis: {\n        minorTickFreq: 4\n      }, \n      grid: {\n        minorVerticalLines: true\n      }\n    },\n    i, graph;\n\n  // Generated second data set:\n  for (i = 0; i &lt; 14; i += 0.5) {\n    d2.push([i, Math.sin(i)]);\n  }\n\n  // Draw the graph:\n  graph = Flotr.draw(\n    container,  // Container element\n    [ d1, d2 ], // Array of data series\n    options     // Configuration options\n  );\n</code></pre>\n<h3 id="microlibs">Microlibs</h3>\n<ul>\n<li><a href="http://documentcloud.github.com/underscore/">underscore.js</a></li>\n<li><a href="https://github.com/fat/bean">bean.js</a></li>\n</ul>\n<h2 id="extending">Extending</h2>\n<p>Flotr may be extended by adding new plugins and graph types.</p>\n<h3 id="graph-types">Graph Types</h3>\n<p>Graph types define how a particular chart is rendered.  Examples include line, bar, pie.</p>\n<p>Existing graph types are found in <code>js/types/</code>.</p>\n<h3 id="plugins">Plugins</h3>\n<p>Plugins extend the core of flotr with new functionality.  They can add interactions, new decorations, etc.  Examples \ninclude titles, labels and selection.</p>\n<p>The plugins included are found in <code>js/plugins/</code>.</p>\n<h2 id="development">Development</h2>\n<p>This project uses <a href="https://github.com/fat/smoosh">smoosh</a> to build and <a href="http://pivotal.github.com/jasmine/">jasmine</a> \nwith <a href="https://github.com/HumbleSoftware/js-imagediff">js-imagediff</a> to test.  Tests may be executed by \n<a href="http://johnbintz.github.com/jasmine-headless-webkit/">jasmine-headless-webkit</a> with \n<code>cd spec; jasmine-headless-webkit -j jasmine.yml -c</code> or by a browser by navigating to \n<code>flotr2/spec/SpecRunner.html</code>.</p>\n<h2 id="shoutouts">Shoutouts</h2>\n<p>Thanks to Bas Wenneker, Fabien Ménager and others for all the work on the original Flotr.\nThanks to Jochen Berger and Jordan Santell for their contributions to Flotr2.</p>\n',
    slug: 'flotr2',
    url: '/mypost/flotr2',
    preview: '<p>The Canvas graphing library. Flotr may be extended by adding new plugins and graph types.</p>\n<p><a href="/mypost/flotr2" title="Read more of Flotr2, a canvas graphing library">read more</a></p>' },
  { title: 'Extend your node requests',
    tags: [ 'node' ],
    category: 'node',
    date: Sun Jul 22 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>Jumps in your middleware and extends route requests with references</p>\n<h2 id="installation">Installation</h2>\n<p><code>npm install request-extend</code></p>\n<h2 id="methods">Methods</h2>\n<p><code>reqExtend([namespace,] object [, force]);</code>\nMerges <code>object</code>&#39;s keys and values with a routes request variable, which optionally can be contained under a property of <code>namespace</code>. <code>force</code> defaults to true, and controls whether or not <code>object</code> values should overwrite properties already on the request variable.</p>\n<h2 id="usage">Usage</h2>\n<pre><code class="lang-javascript```">var\n  express = require( &#39;express&#39; ),\n  reqExtend = require( &#39;request-extend&#39; ),\n  app = express.createServer();\n\nvar\n  models = {\n    user : require( &#39;./models/user&#39; ),\n    data : require( &#39;./models/data&#39; )\n  },\n  config = require( &#39;./config&#39; );\n\napp.configure(function () {\n  app.set( &#39;views&#39;, __dirname + &#39;/views&#39; );\n  app.set( &#39;view engine&#39;, &#39;jade&#39; );\n  app.use( reqExtend( &#39;models&#39;, models ));\n  app.use( reqExtend( &#39;config&#39;, config ));\n  app.use( express.static( __dirname + &#39;/public&#39; ));\n  app.use( app.router );\n});\n</code></pre>\n<p>Adds <code>req.models.user</code>, <code>req.models.data</code> and <code>req.config</code> to all requests in your routes.</p>\n<pre><code class="lang-javascript">app.get( &#39;/users&#39;, function ( req, res, next ) {\n  res.render( &#39;users&#39;, { users: req.models.user });\n});\n</code></pre>\n<h2 id="tests">Tests</h2>\n<p>Run <code>node tests/runTests.js</code> from project root -- testing uses <code>nodeunit</code></p>\n',
    slug: 'node-request-extend',
    url: '/mypost/node-request-extend',
    preview: '<p>Jumps in your middleware and extends route requests with references</p>\n<p><a href="/mypost/node-request-extend" title="Read more of Extend your node requests">read more</a></p>' },
  { title: 'JSON Front Matter in Node',
    tags: [ 'node', 'json' ],
    category: 'node',
    date: Fri Jul 20 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>Extract JSON front matter from strings and files in the style of <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">Jekyll&#39;s YAML Front Matter</a>.</p>\n<h3 id="installing">Installing</h3>\n<ul>\n<li><code>npm install json-front-matter</code></li>\n</ul>\n<h3 id="methods">Methods</h3>\n<ul>\n<li><code>parse( s )</code> Parses string <code>s</code>, returning an object with properties <code>attributes</code>, containing the JSON front matter, and <code>body</code> containing the rest.</li>\n<li><code>parseFile( path, callback( err, data ))</code> Parses file at <code>path</code>, calling the callback upon completion with <code>data</code> object containing <code>attribuets</code> and <code>body</code>, like the string parse method.</li>\n</ul>\n<h3 id="usage">Usage</h3>\n<pre><code class="lang-javascript">var fm = require(&#39;json-front-matter&#39;);\n\nvar string = &#39;{{{ &quot;title&quot; : &quot;some title&quot;, &quot;array&quot; : [ 1, 2, 3 ] }}} bodybodybody&#39;;\nvar out = fm.parse( string );\n\nconsole.log( out.body ) // &#39;bodybodybody&#39;\nconsole.log( out.attributes.title ) // &#39;some title&#39;\nconsole.log( out.attributes.array ) // [ 1, 2, 3 ]\n</code></pre>\n<h3 id="file-example">File Example</h3>\n<p>See <a href="https://raw.github.com/jsantell/node-json-front-matter/master/tests/data/test.md">./tests/data/test.md</a> for example of JSON Front Matter in a markdown file. The outer JSON is encapsulated via triple curly brackets. <code>{{{ &quot;tags&quot; : [ &#39;rock&#39;, &#39;paper&#39;, &#39;scissors&#39; ] }}}</code></p>\n<h2 id="testing">Testing</h2>\n<p>Run <code>node tests/runTests.js</code> from project root -- testing uses <code>nodeunit</code></p>\n',
    slug: 'node-json-front-matter',
    url: '/mypost/node-json-front-matter',
    preview: '<p>Extract JSON front matter from strings and files in the style of <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">Jekyll&#39;s YAML Front Matter</a>.</p>\n<p><a href="/mypost/node-json-front-matter" title="Read more of JSON Front Matter in Node">read more</a></p>' },
  { title: 'Image diffs in JS',
    tags: [ 'canvas', 'tools' ],
    category: 'canvas',
    date: Sun Jul 15 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>JavaScript / Canvas based imagediff utility.</p>\n<h2 id="api">API</h2>\n<ul>\n<li><code>createCanvas()</code> create a new Canvas element.</li>\n<li><code>createImageData(width, height)</code> create a new ImageData object.</li>\n<li><code>isImage(object)</code> tests for Image object.</li>\n<li><code>isCanvas(object)</code> tests for Canvas object.</li>\n<li><code>isContext(object)</code> tests for CanvasRenderingContext2D object.</li>\n<li><code>isImageData(object)</code> tests for ImageData object.</li>\n<li><code>isImageType(object)</code> tests for any of the above.</li>\n<li><code>toImageData(object)</code> converts image type object to a new ImageData object.</li>\n<li><code>equal(a, b, tolerance)</code> tests image type objects for equality; accepts tolerance in pixels.</li>\n<li><code>diff(a, b)</code> performs an image diff on a and b, returning a - b.</li>\n<li><code>noConflict()</code> removes imagediff from the global space for compatibility, returning imagediff.</li>\n<li><code>imageDataToPNG(imageData, outputFile, [callback])</code> (node only) renders the imageData to png in outputFile with optional callback.</li>\n</ul>\n<h2 id="nodejs">NodeJS</h2>\n<p>js-imagediff is available through the npm.  It uses <a href="https://github.com/LearnBoost/node-canvas">node-canvas</a> which requires lib cairo to be installed.\nInstall js-imagediff with <code>npm install -g imagediff</code>.</p>\n<h3 id="command-line">Command Line</h3>\n<ul>\n<li><code>imagediff [-e|equal] [-t|tolerance VALUE] FILE_A FILE_B</code> tests equality of two image files with an optional tolerance, printing &#39;true&#39; or &#39;false&#39;.</li>\n<li><code>imagediff [-d|diff] FILE_A FILE_B OUTPUT_FILE</code> renders an imagediff between two files, saving as the output file.</li>\n</ul>\n<h2 id="unit-testing-canvas">Unit Testing Canvas</h2>\n<p>JS ImageDiff opens up the easy testing of Canvas and other image-like objects in JavaScript.  js-imagediff supplies two Jasmine matchers to make this easier.</p>\n<ul>\n<li><code>toImageDiffEqual(expected, tolerance)</code> expect a result to equal another image type.</li>\n<li><code>toBeImageData()</code> expect a result to be ImageData.</li>\n</ul>\n<p>On failed tests, <code>toImageDiffEqual()</code> will display the expected image, the actual image and the imagediff of the two letting you easily spot mistakes.</p>\n<p>To use matchers:</p>\n<pre><code class="lang-javascript">  beforeEach(function () {\n    this.addMatchers(imagediff.jasmine);\n  });\n</code></pre>\n<h2 id="demo">Demo</h2>\n<ul>\n<li>A demo is available at <a href="http://humblesoftware.github.com/js-imagediff/">http://humblesoftware.github.com/js-imagediff/</a></li>\n<li>A Jasmine test demo is available at <a href="http://humblesoftware.github.com/js-imagediff/test.html">http://humblesoftware.github.com/js-imagediff/test.html</a></li>\n</ul>\n<h2 id="users">Users</h2>\n<ul>\n<li><a href="http://humblesoftware.com/flotr2/">Flotr2</a> - unit testing</li>\n<li><a href="https://github.com/HumbleSoftware/envisionjs">Envision.js</a> - unit testing</li>\n</ul>\n<p>If you are using js-imagediff pelase drop us a line and let us know what you are doing with it.</p>\n<h2 id="changelog">Changelog</h2>\n<p><h3>1.0.3</h3></p>\n<ul>\n<li>Added NPM/node.js support.</li>\n<li>Added command line interface for <code>equal</code> and <code>diff</code> methods.</li>\n<li>Added <code>imageDataToPNG</code> method for node environments.</li>\n<li>Added tolerance to handle lossy formats and provide option for acceptable difference.</li>\n</ul>\n<p><h3>1.0.2</h3></p>\n<ul>\n<li>Added optional width / height parameters to <code>createCanvas</code> for symmetry with <code>createImageData</code>.</li>\n<li>Fixed issue with <code>toImageDiffEqual()</code> matcher and non Node types - will no convert ImageData and contexts to Canvas elements for display.</li>\n</ul>\n<p><h3>1.0.1</h3></p>\n<ul>\n<li>Moved library to imagediff.js</li>\n<li>Added Jasmine matchers</li>\n<li>Minor bug fixes, lint fixes.</li>\n</ul>\n<h2 id="author">Author</h2>\n<p>Carl Sutherland carl@humblesoftware.com\n<a href="http://www.humblesoftware.com">http://www.humblesoftware.com</a></p>\n',
    slug: 'js-image-diff',
    url: '/mypost/js-image-diff',
    preview: '<p>JavaScript / Canvas based imagediff utility.</p>\n<p><a href="/mypost/js-image-diff" title="Read more of Image diffs in JS">read more</a></p>' } ]
[2014-02-13 19:24:16.649] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 19:25:09.753] [ERROR] console - hello world
[2014-02-13 19:25:10.691] [INFO] console - [ { title: 'Dancer.js, a high-level audio API',
    tags: [ 'web audio', 'audio data', 'webgl' ],
    category: 'audio',
    date: Mon Jul 30 2012 00:00:00 GMT+0800 (中国标准时间),
    preview: '<p>dancer.js is a high-level audio API, usable with both Mozilla&#39;s Audio Data API and Webkit&#39;s Web Audio API with flash fallback, designed to make sweet visualizations.\n<a href="http://jsantell.github.com/dancer.js">http://jsantell.github.com/dancer.js</a></p>\n<p><em>v0.2.1 (6/15/2012)</em></p>\n<p>Features</p>\n<hr>\n<ul>\n<li>Use real-time audio waveform and frequency data and map it to any arbitrary visualization</li>\n<li>Leverage beat detection into your visualizations</li>\n<li>Simple API to time callbacks and events to any section of a song</li>\n<li>Supports Web Audio (webkit), Audio Data (mozilla) and flash fallback (v9+)</li>\n<li>Extensible framework supporting plugins and custom behaviours</li>\n</ul>\n<p><a href="/mypost/dancer.js" title="Read more of Dancer.js, a high-level audio API">read more</a></p>',
    content: '<p>dancer.js is a high-level audio API, usable with both Mozilla&#39;s Audio Data API and Webkit&#39;s Web Audio API with flash fallback, designed to make sweet visualizations.</p>\n<script>\n  console.log(\'this is a script parse test\');\n</script>\n\n<p><a href="http://jsantell.github.com/dancer.js">http://jsantell.github.com/dancer.js</a></p>\n<p><em>v0.2.1 (6/15/2012)</em></p>\n<h2 id="features">Features</h2>\n<ul>\n<li>Use real-time audio waveform and frequency data and map it to any arbitrary visualization</li>\n<li>Leverage beat detection into your visualizations</li>\n<li>Simple API to time callbacks and events to any section of a song</li>\n<li>Supports Web Audio (webkit), Audio Data (mozilla) and flash fallback (v9+)</li>\n<li>Extensible framework supporting plugins and custom behaviours</li>\n</ul>\n<h2 id="dancer-instance-methods">Dancer Instance Methods</h2>\n<h3 id="controls">Controls</h3>\n<p>All controls return <code>this</code>.</p>\n<ul>\n<li><code>play()</code> plays the audio and begins the dance.</li>\n<li><code>stop()</code> stops the madness.</li>\n</ul>\n<h3 id="getters">Getters</h3>\n<ul>\n<li><code>getTime()</code> returns the current time.</li>\n<li><code>getWaveform()</code> returns the waveform data array (Float32Array(1024))</li>\n<li><code>getSpectrum()</code> returns the frequency data array (Float32Array(512)). </li>\n<li><code>getFrequency( freq [, endFreq ] )</code> returns the magnitude of a frequency or average over a range of frequencies.</li>\n<li><code>isLoaded()</code> returns a boolean value for the dancer instance&#39;s song load state.</li>\n<li><code>isPlaying()</code> returns a boolean value indicating whether the dancer instance&#39;s song is currently playing or not.</li>\n</ul>\n<h3 id="sections">Sections</h3>\n<p>All section methods return <code>this</code> (CHAIN IT UP) and callbacks executed with <code>this</code> referencing the dancer instance.</p>\n<ul>\n<li><code>after( t, callback )</code> fires callback on every frame after time <code>t</code>.</li>\n<li><code>before( t, callback )</code> fires callback on every frame before time <code>t</code>.</li>\n<li><code>between( t0, t1, callback )</code> fires callback on every frame between time <code>t0</code> and <code>t1</code>.</li>\n<li><code>onceAt( t, callback )</code> fires callback once at time <code>t</code>.</li>\n</ul>\n<h3 id="bindings">Bindings</h3>\n<p>Basic pub/sub to tie into the dancer instance. <code>update</code> and <code>loaded</code> are predefined events called within the framework that are published on every frame (update) and on audio file load (loaded). All callbacks executed with <code>this</code> referencing the dancer instance.</p>\n<ul>\n<li><code>bind( name, callback )</code> subscribes a callback of <code>name</code>. Can call this method several times to bind several callbacks of the same name.</li>\n<li><code>unbind( name )</code> unsubscribes all callbacks of <code>name</code>.</li>\n<li><code>trigger( name )</code> calls all callbacks of <code>name</code>.</li>\n</ul>\n<h3 id="beat">Beat</h3>\n<p>Beats are detected when the amplitude (normalized values between 0 and 1) of a specified frequency, or the max amplitude over a range, is greater than the minimum threshold, as well as greater than the previously registered beat&#39;s amplitude, which is decreased by the decay rate per frame.</p>\n<ul>\n<li><code>createBeat( options )</code> creates a new beat instance tied to the dancer instance, with an options object passed as an argument. Options listed below.<ul>\n<li><code>frequency</code> the frequency (element of the spectrum) to check for a spike. Can be a single frequency (number) or a range (2 element array) that uses the frequency with highest amplitude. Default: <code>[ 0, 10 ]</code></li>\n<li><code>threshold</code> the minimum amplitude of the frequency range in order for a beat to occur. Default: <code>0.3</code></li>\n<li><code>decay</code> the rate that the previously registered beat&#39;s amplitude is reduced by on every frame. Default: <code>0.02</code></li>\n<li><code>onBeat</code> the callback to be called when a beat is detected.</li>\n<li><code>offBeat</code> the callback to be called when there is no beat on the current frame.</li>\n</ul>\n</li>\n</ul>\n<h2 id="dancer-static-methods">Dancer Static Methods</h2>\n<ul>\n<li><code>addPlugin( name, fn )</code> registers a plugin of <code>name</code> with initiation function <code>fn</code> -- described in more detail below</li>\n<li><code>isSupported()</code> returns a string of <code>webaudio</code>, <code>audiodata</code> or <code>flash</code> indicating level of support. Returns an empty string if the browser doesn&#39;t support any of the methods. Can also return <code>null</code> when browser does not support typed arrays.</li>\n<li><code>canPlay( type )</code> returns either <code>true</code> or <code>false</code> indicating whether the browser supports playing back audio of type <code>type</code>, which can be a string of <code>&#39;mp3&#39;</code>, <code>&#39;ogg&#39;</code>, <code>&#39;wav&#39;</code>, or <code>&#39;aac&#39;</code>.</li>\n<li><code>setOptions( options )</code> takes a set of key-value pairs in an object for options. Options below.</li>\n</ul>\n<h3 id="dancer-options">Dancer Options</h3>\n<ul>\n<li><code>flashSWF</code> The path to soundmanager2.swf. Required for flash fallback.</li>\n<li><code>flashJS</code> The path to soundmanager2.js. Required for flash fallback.</li>\n</ul>\n<h2 id="dancer-constructor">Dancer Constructor</h2>\n<p><code>new Dancer( source, [ codecs ] )</code> returns a new <code>Dancer</code> instance -- takes a string of <code>source</code> as a path to the audio file. Optionally, you may pass in array of codec extensions of the form <code>[ &#39;mp3&#39;, &#39;ogg&#39; ]</code>, where the first supported codec is used and appended to source in the form <code>source + &#39;.&#39; + supportedCodec</code>.</p>\n<h2 id="beat-instance-methods">Beat Instance Methods</h2>\n<p>These methods can be called on a beat instance to turn on and off the registered callbacks</p>\n<ul>\n<li><code>on()</code> turns on the beat instance&#39;s callbacks and detections</li>\n<li><code>off()</code> turns off the beat instance&#39;s callbacks and detections</li>\n</ul>\n<h2 id="example">Example</h2>\n<p>For simple examples, check out the <code>examples/</code> folder -- both the FFT and waveform examples are straight forward, leveraging the corresponding plugins for visualizations.</p>\n<pre><code class="lang-javascript">  // To enable flash fallback, specify the paths for the flashSWF and flashJS\n  Dancer.setOptions({\n    flashJS  : &#39;../../lib/soundmanager2.js&#39;,\n    flashSWF : &#39;../../lib/soundmanager2.swf&#39;\n  });\n\n  var\n    dancer = new Dancer( &quot;sickjams.ogg&quot; ),\n    beat = dancer.createBeat({\n      onBeat: function ( mag ) {\n        console.log(&#39;Beat!&#39;);\n      },\n      offBeat: function ( mag ) {\n        console.log(&#39;no beat :(&#39;);\n      }\n    });\n\n  // Let&#39;s turn this beat on right away\n  beat.on();\n\n  dancer.onceAt( 10, function() {\n    // Let&#39;s set up some things once at 10 seconds\n  }).between( 10, 60, function() {\n    // After 10s, let&#39;s do something on every frame for the first minute\n  }).after( 60, function() {\n    // After 60s, let&#39;s get this real and map a frequency to an object&#39;s y position\n    // Note that the instance of dancer is bound to &quot;this&quot;\n    object.y = this.getFrequency( 400 );\n  }).onceAt( 120, function() {\n    // After 120s, we&#39;ll turn the beat off as another object&#39;s y position is still being mapped from the previous &quot;after&quot; method\n    beat.off();\n  });\n\n  dancer.play();\n</code></pre>\n<h2 id="requirements">Requirements</h2>\n<p><strong>HTML5 Playback with Web Audio or Audio Data</strong> Chrome and Firefox are both supported out of the box -- other browsers will need to leverage the flash fallback until either of these APIs are implemented.</p>\n<p><strong>To enable flash</strong> You must set Dancer&#39;s defaults for <code>flashSWF</code> with the path to the <code>soundmanager2.swf</code> and <code>flashJS</code> to the path to <code>soundmanager2.js</code>, both found in <code>lib/</code>. Flash player 9 is required, and you must provide an mp3 option. Waveform data in Flash is a 1024 Float32Array, but only the first 512 elements have values due to flash&#39;s computeSpectrum method.</p>\n<p><strong>Uint32Array and Float32Array are required</strong> Include a shim if you&#39;d like to support browsers that do not have these typed arrays.</p>\n<h2 id="dependencies">Dependencies</h2>\n<ul>\n<li><a href="https://github.com/corbanbrook/dsp.js/">dsp.js</a> - A subset of dsp.js (fft) is used for Fast Fourier Transformations ( Included in packaged Dancer )</li>\n<li><a href="http://www.featureblend.com/javascript-flash-detection-library.html">flash_detect</a> - flash detect is used for immediate flash detection ( Included in packaged Dancer )</li>\n<li><a href="https://github.com/scottschiller/SoundManager2">soundmanager2</a> - soundmanager2 is used for flash fallback ( found in <code>lib/</code>, asynchronously loaded )</li>\n</ul>\n<h2 id="extending-plugins">Extending/Plugins</h2>\n<p>You can extend the Dancer prototype by calling the static method <code>addPlugin( name, fn )</code>, which extends the Dancer prototype. A Dancer instance then can call the function provided in its context and subscribe to a preexisting event like <code>update</code>, or make your own. Look in the <code>plugins/</code> directory for examples. </p>\n<h2 id="development">Development</h2>\n<p>This project uses <a href="https://github.com/fat/smoosh">smoosh</a> to build and <a href="http://pivotal.github.com/jasmine/">jasmine</a> for testing. A CLI for testing would be awesome, but Mozilla and WebKit implementations differ greatly -- go to <code>spec/index.html</code> in Mozilla/WebKit browsers to test. All tests should pass in Chrome, Firefox, Opera and Safari, <em>although they can get weird</em>. Should consistently pass.</p>\n<h2 id="change-logs">Change Logs</h2>\n<p><strong>v0.2.1 (6/16/2012)</strong></p>\n<ul>\n<li>Added getWaveform() method and a corresponding visualization for waveforms</li>\n</ul>\n<p><strong>v0.2.0 (6/14/2012)</strong></p>\n<ul>\n<li>Added flash support with soundmanager2 -- flash_detect now included in build</li>\n<li>Added static methods <code>isSupported</code>, <code>canPlay</code> and <code>setOptions</code></li>\n<li>Added multiple audio codecs support (#7)</li>\n<li>Added a new simple FFT examples, both examples having feature detection and controls (#10)</li>\n<li>Fixed several Webkit bugs (#4, #8)</li>\n</ul>\n<p><strong>v0.1.0 (6/3/2012)</strong></p>\n<ul>\n<li>Initial Web Audio/ Audio Data release</li>\n</ul>\n',
    slug: 'dancer.js',
    url: '/mypost/dancer.js' },
  { title: 'Flotr2, a canvas graphing library',
    tags: [ 'charts', 'graph', 'canvas' ],
    category: 'canvas',
    date: Wed Jul 25 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>The Canvas graphing library. Flotr may be extended by adding new plugins and graph types.</p>\n<h2 id="api">API</h2>\n<p>The API consists of a primary draw method which accepts a configuration object, helper methods, and several microlibs.</p>\n<h3 id="example">Example</h3>\n<pre><code class="lang-javascript">  var\n    // Container div:\n    container = document.getElementById(&quot;flotr-example-graph&quot;),\n    // First data series:\n    d1 = [[0, 3], [4, 8], [8, 5], [9, 13]],\n    // Second data series:\n    d2 = [],\n    // A couple flotr configuration options:\n    options = {\n      xaxis: {\n        minorTickFreq: 4\n      }, \n      grid: {\n        minorVerticalLines: true\n      }\n    },\n    i, graph;\n\n  // Generated second data set:\n  for (i = 0; i &lt; 14; i += 0.5) {\n    d2.push([i, Math.sin(i)]);\n  }\n\n  // Draw the graph:\n  graph = Flotr.draw(\n    container,  // Container element\n    [ d1, d2 ], // Array of data series\n    options     // Configuration options\n  );\n</code></pre>\n<h3 id="microlibs">Microlibs</h3>\n<ul>\n<li><a href="http://documentcloud.github.com/underscore/">underscore.js</a></li>\n<li><a href="https://github.com/fat/bean">bean.js</a></li>\n</ul>\n<h2 id="extending">Extending</h2>\n<p>Flotr may be extended by adding new plugins and graph types.</p>\n<h3 id="graph-types">Graph Types</h3>\n<p>Graph types define how a particular chart is rendered.  Examples include line, bar, pie.</p>\n<p>Existing graph types are found in <code>js/types/</code>.</p>\n<h3 id="plugins">Plugins</h3>\n<p>Plugins extend the core of flotr with new functionality.  They can add interactions, new decorations, etc.  Examples \ninclude titles, labels and selection.</p>\n<p>The plugins included are found in <code>js/plugins/</code>.</p>\n<h2 id="development">Development</h2>\n<p>This project uses <a href="https://github.com/fat/smoosh">smoosh</a> to build and <a href="http://pivotal.github.com/jasmine/">jasmine</a> \nwith <a href="https://github.com/HumbleSoftware/js-imagediff">js-imagediff</a> to test.  Tests may be executed by \n<a href="http://johnbintz.github.com/jasmine-headless-webkit/">jasmine-headless-webkit</a> with \n<code>cd spec; jasmine-headless-webkit -j jasmine.yml -c</code> or by a browser by navigating to \n<code>flotr2/spec/SpecRunner.html</code>.</p>\n<h2 id="shoutouts">Shoutouts</h2>\n<p>Thanks to Bas Wenneker, Fabien Ménager and others for all the work on the original Flotr.\nThanks to Jochen Berger and Jordan Santell for their contributions to Flotr2.</p>\n',
    slug: 'flotr2',
    url: '/mypost/flotr2',
    preview: '<p>The Canvas graphing library. Flotr may be extended by adding new plugins and graph types.</p>\n<p><a href="/mypost/flotr2" title="Read more of Flotr2, a canvas graphing library">read more</a></p>' },
  { title: 'Extend your node requests',
    tags: [ 'node' ],
    category: 'node',
    date: Sun Jul 22 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>Jumps in your middleware and extends route requests with references</p>\n<h2 id="installation">Installation</h2>\n<p><code>npm install request-extend</code></p>\n<h2 id="methods">Methods</h2>\n<p><code>reqExtend([namespace,] object [, force]);</code>\nMerges <code>object</code>&#39;s keys and values with a routes request variable, which optionally can be contained under a property of <code>namespace</code>. <code>force</code> defaults to true, and controls whether or not <code>object</code> values should overwrite properties already on the request variable.</p>\n<h2 id="usage">Usage</h2>\n<pre><code class="lang-javascript```">var\n  express = require( &#39;express&#39; ),\n  reqExtend = require( &#39;request-extend&#39; ),\n  app = express.createServer();\n\nvar\n  models = {\n    user : require( &#39;./models/user&#39; ),\n    data : require( &#39;./models/data&#39; )\n  },\n  config = require( &#39;./config&#39; );\n\napp.configure(function () {\n  app.set( &#39;views&#39;, __dirname + &#39;/views&#39; );\n  app.set( &#39;view engine&#39;, &#39;jade&#39; );\n  app.use( reqExtend( &#39;models&#39;, models ));\n  app.use( reqExtend( &#39;config&#39;, config ));\n  app.use( express.static( __dirname + &#39;/public&#39; ));\n  app.use( app.router );\n});\n</code></pre>\n<p>Adds <code>req.models.user</code>, <code>req.models.data</code> and <code>req.config</code> to all requests in your routes.</p>\n<pre><code class="lang-javascript">app.get( &#39;/users&#39;, function ( req, res, next ) {\n  res.render( &#39;users&#39;, { users: req.models.user });\n});\n</code></pre>\n<h2 id="tests">Tests</h2>\n<p>Run <code>node tests/runTests.js</code> from project root -- testing uses <code>nodeunit</code></p>\n',
    slug: 'node-request-extend',
    url: '/mypost/node-request-extend',
    preview: '<p>Jumps in your middleware and extends route requests with references</p>\n<p><a href="/mypost/node-request-extend" title="Read more of Extend your node requests">read more</a></p>' },
  { title: 'JSON Front Matter in Node',
    tags: [ 'node', 'json' ],
    category: 'node',
    date: Fri Jul 20 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>Extract JSON front matter from strings and files in the style of <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">Jekyll&#39;s YAML Front Matter</a>.</p>\n<h3 id="installing">Installing</h3>\n<ul>\n<li><code>npm install json-front-matter</code></li>\n</ul>\n<h3 id="methods">Methods</h3>\n<ul>\n<li><code>parse( s )</code> Parses string <code>s</code>, returning an object with properties <code>attributes</code>, containing the JSON front matter, and <code>body</code> containing the rest.</li>\n<li><code>parseFile( path, callback( err, data ))</code> Parses file at <code>path</code>, calling the callback upon completion with <code>data</code> object containing <code>attribuets</code> and <code>body</code>, like the string parse method.</li>\n</ul>\n<h3 id="usage">Usage</h3>\n<pre><code class="lang-javascript">var fm = require(&#39;json-front-matter&#39;);\n\nvar string = &#39;{{{ &quot;title&quot; : &quot;some title&quot;, &quot;array&quot; : [ 1, 2, 3 ] }}} bodybodybody&#39;;\nvar out = fm.parse( string );\n\nconsole.log( out.body ) // &#39;bodybodybody&#39;\nconsole.log( out.attributes.title ) // &#39;some title&#39;\nconsole.log( out.attributes.array ) // [ 1, 2, 3 ]\n</code></pre>\n<h3 id="file-example">File Example</h3>\n<p>See <a href="https://raw.github.com/jsantell/node-json-front-matter/master/tests/data/test.md">./tests/data/test.md</a> for example of JSON Front Matter in a markdown file. The outer JSON is encapsulated via triple curly brackets. <code>{{{ &quot;tags&quot; : [ &#39;rock&#39;, &#39;paper&#39;, &#39;scissors&#39; ] }}}</code></p>\n<h2 id="testing">Testing</h2>\n<p>Run <code>node tests/runTests.js</code> from project root -- testing uses <code>nodeunit</code></p>\n',
    slug: 'node-json-front-matter',
    url: '/mypost/node-json-front-matter',
    preview: '<p>Extract JSON front matter from strings and files in the style of <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">Jekyll&#39;s YAML Front Matter</a>.</p>\n<p><a href="/mypost/node-json-front-matter" title="Read more of JSON Front Matter in Node">read more</a></p>' },
  { title: 'Image diffs in JS',
    tags: [ 'canvas', 'tools' ],
    category: 'canvas',
    date: Sun Jul 15 2012 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>JavaScript / Canvas based imagediff utility.</p>\n<h2 id="api">API</h2>\n<ul>\n<li><code>createCanvas()</code> create a new Canvas element.</li>\n<li><code>createImageData(width, height)</code> create a new ImageData object.</li>\n<li><code>isImage(object)</code> tests for Image object.</li>\n<li><code>isCanvas(object)</code> tests for Canvas object.</li>\n<li><code>isContext(object)</code> tests for CanvasRenderingContext2D object.</li>\n<li><code>isImageData(object)</code> tests for ImageData object.</li>\n<li><code>isImageType(object)</code> tests for any of the above.</li>\n<li><code>toImageData(object)</code> converts image type object to a new ImageData object.</li>\n<li><code>equal(a, b, tolerance)</code> tests image type objects for equality; accepts tolerance in pixels.</li>\n<li><code>diff(a, b)</code> performs an image diff on a and b, returning a - b.</li>\n<li><code>noConflict()</code> removes imagediff from the global space for compatibility, returning imagediff.</li>\n<li><code>imageDataToPNG(imageData, outputFile, [callback])</code> (node only) renders the imageData to png in outputFile with optional callback.</li>\n</ul>\n<h2 id="nodejs">NodeJS</h2>\n<p>js-imagediff is available through the npm.  It uses <a href="https://github.com/LearnBoost/node-canvas">node-canvas</a> which requires lib cairo to be installed.\nInstall js-imagediff with <code>npm install -g imagediff</code>.</p>\n<h3 id="command-line">Command Line</h3>\n<ul>\n<li><code>imagediff [-e|equal] [-t|tolerance VALUE] FILE_A FILE_B</code> tests equality of two image files with an optional tolerance, printing &#39;true&#39; or &#39;false&#39;.</li>\n<li><code>imagediff [-d|diff] FILE_A FILE_B OUTPUT_FILE</code> renders an imagediff between two files, saving as the output file.</li>\n</ul>\n<h2 id="unit-testing-canvas">Unit Testing Canvas</h2>\n<p>JS ImageDiff opens up the easy testing of Canvas and other image-like objects in JavaScript.  js-imagediff supplies two Jasmine matchers to make this easier.</p>\n<ul>\n<li><code>toImageDiffEqual(expected, tolerance)</code> expect a result to equal another image type.</li>\n<li><code>toBeImageData()</code> expect a result to be ImageData.</li>\n</ul>\n<p>On failed tests, <code>toImageDiffEqual()</code> will display the expected image, the actual image and the imagediff of the two letting you easily spot mistakes.</p>\n<p>To use matchers:</p>\n<pre><code class="lang-javascript">  beforeEach(function () {\n    this.addMatchers(imagediff.jasmine);\n  });\n</code></pre>\n<h2 id="demo">Demo</h2>\n<ul>\n<li>A demo is available at <a href="http://humblesoftware.github.com/js-imagediff/">http://humblesoftware.github.com/js-imagediff/</a></li>\n<li>A Jasmine test demo is available at <a href="http://humblesoftware.github.com/js-imagediff/test.html">http://humblesoftware.github.com/js-imagediff/test.html</a></li>\n</ul>\n<h2 id="users">Users</h2>\n<ul>\n<li><a href="http://humblesoftware.com/flotr2/">Flotr2</a> - unit testing</li>\n<li><a href="https://github.com/HumbleSoftware/envisionjs">Envision.js</a> - unit testing</li>\n</ul>\n<p>If you are using js-imagediff pelase drop us a line and let us know what you are doing with it.</p>\n<h2 id="changelog">Changelog</h2>\n<p><h3>1.0.3</h3></p>\n<ul>\n<li>Added NPM/node.js support.</li>\n<li>Added command line interface for <code>equal</code> and <code>diff</code> methods.</li>\n<li>Added <code>imageDataToPNG</code> method for node environments.</li>\n<li>Added tolerance to handle lossy formats and provide option for acceptable difference.</li>\n</ul>\n<p><h3>1.0.2</h3></p>\n<ul>\n<li>Added optional width / height parameters to <code>createCanvas</code> for symmetry with <code>createImageData</code>.</li>\n<li>Fixed issue with <code>toImageDiffEqual()</code> matcher and non Node types - will no convert ImageData and contexts to Canvas elements for display.</li>\n</ul>\n<p><h3>1.0.1</h3></p>\n<ul>\n<li>Moved library to imagediff.js</li>\n<li>Added Jasmine matchers</li>\n<li>Minor bug fixes, lint fixes.</li>\n</ul>\n<h2 id="author">Author</h2>\n<p>Carl Sutherland carl@humblesoftware.com\n<a href="http://www.humblesoftware.com">http://www.humblesoftware.com</a></p>\n',
    slug: 'js-image-diff',
    url: '/mypost/js-image-diff',
    preview: '<p>JavaScript / Canvas based imagediff utility.</p>\n<p><a href="/mypost/js-image-diff" title="Read more of Image diffs in JS">read more</a></p>' } ]
[2014-02-13 19:25:10.765] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 19:25:13.193] [INFO] console - 团队介绍
[2014-02-13 19:25:13.193] [INFO] console - [ { title: '团队介绍',
    tags: [ 'node.js', 'express' ],
    category: '团队介绍',
    date: Thu Jan 16 2014 00:00:00 GMT+0800 (中国标准时间),
    content: '<p>极限网络计算与服务科研团队目前由赵勇教授、文泉副教授、李玉喜副教授、田文洪副教授、陈娟副教授和薛瑞尼副教授组成。旨在以具有海外学习和工作经验背景的骨干教师为主，带领一批青年教师、博士研究生和硕士研究生，进行极限规模的网络计算与服务的研究开发，这一研究领域目前在国内外还处于初级阶段。我们现在处于一个数据爆炸，IT资源日趋集中整合，而各行业计算需求不断扩大的时代，团队借鉴海外先进的教学、科研和管理模式，培养一支具备相当研究实力的队伍，研发能够管理、调度极限规模的网络计算资源，和存储、处理海量数据（PB、EB甚至更大规模）的系统和产品。团队积极加强国际交流与合作，紧密跟踪国际相关领域的动态和研究进展，争取保持研究的国际领先性，为申请省部级、国家级相关研究平台创造条件，为我院和我校的科研建设贡献力量。团队研究的重心是能够管理调度超大规模的网络连接的资源，包括大规模集群、网格、云平台、超级计算机等，进行大规模计算、存储、数据处理和挖掘，并在此基础上提供服务。主要的研究方向包括云数据中心资源管理与调度，大规模任务调度处理、海量数据处理和数据挖掘以及海量分布式存储系统的研究。</p>\n<hr>\n<h2 id="-">团队特色</h2>\n<ul>\n<li>团队成员均于美国，加拿大学习工作多年，熟悉行业国际研究动态及国外科研开发过程</li>\n<li>有多年大规模系统设计或大规模数据处理经验，团队成员研究方向和领域互补性强</li>\n<li>有紧密的国际联系和项目合作</li>\n</ul>\n<hr>\n<h2 id="-">团队软硬件平台</h2>\n<ul>\n<li>包括IBM刀片服务器数台，Dell专业服务器数台和相关云计算管理需拟化软件，台式机器几十台。团队正与企业合作共建云存储平台100个节点（四个以上局域网）。团队利用以上资源已经建成VMware虚拟机和集群，Hadoop集群，微软高性能计算集群HPC等多个并行处理计算用平台。初步完成大规模云任务调度器，云模拟系统，云资源共享系统，物联网RFID中间件等多个应用平台。</li>\n</ul>\n<hr>\n<h2 id="-">研究方向</h2>\n<ul>\n<li><p><strong>云数据资源中心调度与管理</strong></p>\n<ul>\n<li>数万台甚至更多的计算机资源及相应的网络，存储设备</li>\n<li>弹性调度，资源合理利用，云服务可靠性，可用性，电力能源节省</li>\n</ul>\n</li>\n<li><p><strong>大规模任务调度处理</strong></p>\n<ul>\n<li>数十万个计算节点</li>\n<li>分发效率，数据相关性，能源节省</li>\n</ul>\n</li>\n<li><p><strong>海量数据处理和数据挖掘</strong></p>\n<ul>\n<li>网站日志，用户行为，用户发布的信息</li>\n<li>视频图像</li>\n<li>存储，索引架构，任务和数据耦合</li>\n</ul>\n</li>\n<li><p><strong>海量分布式存储系统</strong></p>\n<ul>\n<li>传统数据库力不从心</li>\n<li>存储，索引，备份，处理</li>\n<li>结构，扩展性，一致性</li>\n</ul>\n</li>\n</ul>\n',
    slug: '团队介绍',
    url: '/aboutUs/ourpost/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D',
    preview: '<p>极限网络计算与服务科研团队目前由赵勇教授、文泉副教授、李玉喜副教授、田文洪副教授、陈娟副教授和薛瑞尼副教授组成。旨在以具有海外学习和工作经验背景的骨干教师为主，带领一批青年教师、博士研究生和硕士研究生，进行极限规模的网络计算与服务的研究开发，这一研究领域目前在国内外还处于初级阶段。我们现在处于一个数据爆炸，IT资源日趋集中整合，而各行业计算需求不断扩大的时代，团队借鉴海外先进的教学、科研和管理模式，培养一支具备相当研究实力的队伍，研发能够管理、调度极限规模的网络计算资源，和存储、处理海量数据（PB、EB甚至更大规模）的系统和产品。团队积极加强国际交流与合作，紧密跟踪国际相关领域的动态和研究进展，争取保持研究的国际领先性，为申请省部级、国家级相关研究平台创造条件，为我院和我校的科研建设贡献力量。团队研究的重心是能够管理调度超大规模的网络连接的资源，包括大规模集群、网格、云平台、超级计算机等，进行大规模计算、存储、数据处理和挖掘，并在此基础上提供服务。主要的研究方向包括云数据中心资源管理与调度，大规模任务调度处理、海量数据处理和数据挖掘以及海量分布式存储系统的研究。</p>\n<p><a href="/aboutUs/ourpost/%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D" title="Read more of 团队介绍">read more</a></p>' } ]
[2014-02-13 19:25:13.214] [WARN] console - Warning: missing space before text for line 32 of jade file.
[2014-02-13 19:25:15.071] [WARN] console - Warning: missing space before text for line 32 of jade file.
